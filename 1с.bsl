// Функция устанавливает тип данных в колонке таблицы значений
Функция УстановитьТипДанных( Тип, Размер = 12, Точность = 2 )
	Массив = Новый Массив;
	Массив.Добавить( Тип );
	
	Если Тип = Тип("Строка") Тогда
		Результат = Новый ОписаниеТипов( Массив, , Новый КвалификаторыСтроки( Размер ) );
	ИначеЕсли Тип = Тип("Число") Тогда 
		Результат = Новый ОписаниеТипов( Массив, Новый КвалификаторыЧисла( Размер, Точность ) );
	ИначеЕсли Тип = Тип("Дата") Тогда 
		Результат = Новый ОписаниеТипов( Массив, , , Новый КвалификаторыДаты( ЧастиДаты.ДатаВремя ) );  
	Иначе
		Результат = Новый ОписаниеТипов( Массив );
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//Функция заполняет объект ФизическиеЛица данными
Процедура ЗаполнитьФизическоеЛицо( Объект, Реквизиты, КонтактнаяИнформация )
	
	ЗаполнитьЗначенияСвойств( Объект, Реквизиты, "ДатаРождения,Пол,ИНН" );
	
	ЗаполнитьКонтактнуюИнформацию( Объект, КонтактнаяИнформация );
	
КонецПроцедуры
Процедура ЗаполнитьКонтактнуюИнформацию( Объект, КонтактнаяИнформация )
	Если КонтактнаяИнформация.Количество() > 0 Тогда
		Для Каждого Строка Из КонтактнаяИнформация Цикл
			НоваяКонтактнаяИнформация = Объект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств( НоваяКонтактнаяИнформация, Строка );
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

// Функция устанавливает структуру КонтактнойИнформации в таблице значений
Функция КонтактнаяИнформацияТаблицаЗначений()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить( "Тип", УстановитьТипДанных( Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") ) );
	Результат.Колонки.Добавить( "Вид", УстановитьТипДанных( Тип("СправочникСсылка.ВидыКонтактнойИнформации") ) );
	Результат.Колонки.Добавить( "Представление" );
	Результат.Колонки.Добавить( "ЗначенияПолей" );
	Результат.Колонки.Добавить( "Страна" );
	Результат.Колонки.Добавить( "Регион" );
	Результат.Колонки.Добавить( "Город" );
	Результат.Колонки.Добавить( "АдресЭП" );
	Результат.Колонки.Добавить( "ДоменноеИмяСервера" );
	Результат.Колонки.Добавить( "НомерТелефона" );
	Результат.Колонки.Добавить( "НомерТелефонаБезКодов" );
	Результат.Колонки.Добавить( "ВидДляСписка", УстановитьТипДанных( Тип("СправочникСсылка.ВидыКонтактнойИнформации") ) );
	
	Возврат Результат;
	
	
КонецФункции
Функция ПартнерыТаблицаЗначений()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить( "Наименование", УстановитьТипДанных( Тип("Строка"), 100 ) );
	Результат.Колонки.Добавить( "НаименованиеПолное", УстановитьТипДанных( Тип("Строка"), 250 ) );
	Результат.Колонки.Добавить( "Клиент", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "Поставщик", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "Перевозчик", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ПрочиеОтношения", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "Конкурент", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "Комментарий", УстановитьТипДанных( Тип("Строка"), 500 ) );
	Результат.Колонки.Добавить( "ОбслуживаетсяТорговымиПредставителями", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "Пол", УстановитьТипДанных( Тип("ПеречислениеСсылка.ПолФизическогоЛица") ) );
	Результат.Колонки.Добавить( "ЮрФизЛицо", УстановитьТипДанных( Тип("ПеречислениеСсылка.КомпанияЧастноеЛицо") ) );
	Результат.Колонки.Добавить( "ГруппаДоступа", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Результат.Колонки.Добавить( "ДатаРегистрации", УстановитьТипДанных( Тип("Дата") ) );
	Результат.Колонки.Добавить( "ОсновнойМенеджер", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Результат.Колонки.Добавить( "БизнесРегион", УстановитьТипДанных( Тип("Строка"), 100 ) );
	
	
	Возврат Результат;
	
КонецФункции
Функция КонтрагентыТаблицаЗначений()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить( "Наименование", УстановитьТипДанных( Тип("Строка"), 100 ) ); 
	Результат.Колонки.Добавить( "НаименованиеПолное", УстановитьТипДанных( Тип("Строка"), 250 ) );
	Результат.Колонки.Добавить( "ИНН", УстановитьТипДанных( Тип("Строка"), 12 ) );
	Результат.Колонки.Добавить( "КПП", УстановитьТипДанных( Тип("Строка"), 9 ) );
	Результат.Колонки.Добавить( "ОбособленноеПодразделение", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ЮридическоеФизическоеЛицо", УстановитьТипДанных( Тип("ПеречислениеСсылка.ЮридическоеФизическоеЛицо") ) );
	Результат.Колонки.Добавить( "КодПоОКПО", УстановитьТипДанных( Тип("Строка"), 10 ) );
	Результат.Колонки.Добавить( "Партнер", УстановитьТипДанных(  Тип("Строка"), 100 ) );
	Результат.Колонки.Добавить( "ЮрФизЛицо", УстановитьТипДанных( Тип("ПеречислениеСсылка.ЮрФизЛицо") ) );
	Результат.Колонки.Добавить( "СтранаРегистрации", УстановитьТипДанных( Тип("Строка"), 3 ) );
	Результат.Колонки.Добавить( "РегистрационныйНомер", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Результат.Колонки.Добавить( "НалоговыйНомер", УстановитьТипДанных( Тип("Строка"), 50 ) );
	
	Возврат Результат;
	
КонецФункции
Функция ГоловныеПартнерыТаблицаЗначений()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить( "ИНН", УстановитьТипДанных( Тип("Строка"), 12 ) );
	Результат.Колонки.Добавить( "Ссылка", УстановитьТипДанных( Тип("СправочникСсылка.Партнеры") ) );
	Результат.Колонки.Добавить( "Количество", УстановитьТипДанных(  Тип("Число"), 3, 0 ) );
	
	Возврат Результат;	
	
КонецФункции
Функция ДоговорыКонтрагентовТаблицаЗначений()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить( "Контрагент", УстановитьТипДанных( Тип("Строка"), 12 )  );
	Результат.Колонки.Добавить( "Партнер", УстановитьТипДанных( Тип("Строка"), 100 ) );
	Результат.Колонки.Добавить( "Номер", УстановитьТипДанных( Тип("Строка"), 128 ) );
	Результат.Колонки.Добавить( "Дата",  УстановитьТипДанных( Тип("Дата") ) );
	Результат.Колонки.Добавить( "Организация", УстановитьТипДанных( Тип("Строка"), 12 ) );
	Результат.Колонки.Добавить( "НомерСчетаОрганизации", УстановитьТипДанных( Тип("Строка"), 34 ) );
	Результат.Колонки.Добавить( "НомерСчетаКонтрагента", УстановитьТипДанных( Тип("Строка"), 34 ) );
	Результат.Колонки.Добавить( "ТипДоговора", УстановитьТипДанных( Тип("ПеречислениеСсылка.ТипыДоговоров") ) );
	Результат.Колонки.Добавить( "Менеджер", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Результат.Колонки.Добавить( "ОграничиватьСуммуЗадолженности", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ДопустимаяСуммаЗадолженности", УстановитьТипДанных( Тип("Число"), 15, 2 ) );
	Результат.Колонки.Добавить( "СтатьяДвиженияДенежныхСредств", УстановитьТипДанных( Тип("Строка"), 9 ) );  // Код СтатьиДвиженияДенежныхСредств 
	Результат.Колонки.Добавить( "КонтактноеЛицо", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Результат.Колонки.Добавить( "СтавкаНДС", УстановитьТипДанных( Тип("ПеречислениеСсылка.СтавкиНДС") ) );
	Результат.Колонки.Добавить( "Статус", УстановитьТипДанных( Тип("ПеречислениеСсылка.СтатусыДоговоровКонтрагентов") ) );
	Результат.Колонки.Добавить( "ВалютаВзаиморасчетов", УстановитьТипДанных( Тип("Строка"), 3 ) );
	Результат.Колонки.Добавить( "Наименование", УстановитьТипДанных( Тип("Строка"), 150 ) );
	Результат.Колонки.Добавить( "УчетАгентскогоНДС", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ПорядокОплаты", УстановитьТипДанных( Тип("ПеречислениеСсылка.ПорядокОплатыПоСоглашениям") ) ); 
	Результат.Колонки.Добавить( "ПорядокРасчетов", УстановитьТипДанных( Тип("ПеречислениеСсылка.ПорядокРасчетов") ) ); // Перечисления.ПорядокРасчетов.ПоНакладным;
	Результат.Колонки.Добавить( "Согласован", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ХозяйственнаяОперация", УстановитьТипДанных( Тип("ПеречислениеСсылка.ХозяйственныеОперации") ) ); // = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Результат.Колонки.Добавить( "ЗапрещаетсяПросроченнаяЗадолженность", УстановитьТипДанных( Тип("Булево") ) ); // = Ложь;
	Результат.Колонки.Добавить( "УстановленСрокОплаты", УстановитьТипДанных( Тип("Булево") ) ); /// = Ложь;
	Результат.Колонки.Добавить( "ЗаданГрафикИсполнения", УстановитьТипДанных( Тип("Булево") ) ); // = Ложь;
	Результат.Колонки.Добавить( "ДоговорСУчастникомГОЗ", УстановитьТипДанных( Тип("Булево") ) ); // = Ложь;
	Результат.Колонки.Добавить( "ПлатежиПо275ФЗ", УстановитьТипДанных( Тип("Булево") ) ); // = Ложь;
	Результат.Колонки.Добавить( "ИностранныйИсполнительВУтвержденномПеречнеГОЗ", УстановитьТипДанных( Тип("Булево") ) ); // = Ложь;
	Результат.Колонки.Добавить( "ВариантОформленияЗакупок", УстановитьТипДанных( Тип("ПеречислениеСсылка.ВариантыОформленияЗакупок") ) );
	Результат.Колонки.Добавить( "ОплатаРасходовПоТарифамСГосрегулированием", УстановитьТипДанных( Тип("Булево") ) ); //= Ложь;
	Результат.Колонки.Добавить( "ВыполненыОбязательстваПоДоговоруГОЗ", УстановитьТипДанных( Тип("Булево") ) ); // = Ложь;
	Результат.Колонки.Добавить( "ВариантПриемкиТоваров", УстановитьТипДанных( Тип("ПеречислениеСсылка.ВариантыПриемкиТоваров" ) ) );
	Результат.Колонки.Добавить( "СпособДоставки", УстановитьТипДанных( Тип("ПеречислениеСсылка.СпособыДоставки" ) ) );
	
	Возврат Результат;
	
КонецФункции
Функция БанковскиеСчетаТаблицаЗначений()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить( "НомерСчета", УстановитьТипДанных( Тип("Строка"), 34 ) );
	Результат.Колонки.Добавить( "Банк", УстановитьТипДанных( Тип("Строка"), 9 ) );
	Результат.Колонки.Добавить( "ВалютаДенежныхСредств", УстановитьТипДанных( Тип("Строка"), 3 ) );
	
	Результат.Колонки.Добавить( "Владелец", УстановитьТипДанных( Тип("Строка"), 12 ) );
	
	Возврат Результат;
	
КонецФункции
Функция НоменклатураТаблицаЗначений()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить( "НаименованиеПолное", УстановитьТипДанных( Тип("Строка"), 1024 ) );
	Результат.Колонки.Добавить( "ЕдиницаИзмерения", УстановитьТипДанных( Тип("Строка"), 4 ) );
	Результат.Колонки.Добавить( "Артикул", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Результат.Колонки.Добавить( "ВариантОформленияПродажи", УстановитьТипДанных( Тип("ПеречислениеСсылка.ВариантыОформленияПродажи") ) );
	Результат.Колонки.Добавить( "ВесЕдиницаИзмерения", УстановитьТипДанных( Тип("Строка"), 4 ) );
	Результат.Колонки.Добавить( "ВесЗнаменатель",  УстановитьТипДанных( Тип("Число"), 15, 3 ) );
	Результат.Колонки.Добавить( "ВесИспользовать", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ВесМожноУказыватьВДокументах", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ВесЧислитель", УстановитьТипДанных( Тип("Число"), 15, 3 ) );
	Результат.Колонки.Добавить( "ВестиУчетПоГТД", УстановитьТипДанных( Тип("Булево"), 4 ) );
	Результат.Колонки.Добавить( "ВестиУчетСертификатовНоменклатуры", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ВидНоменклатуры", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Результат.Колонки.Добавить( "АлкогольнаяПродукция", УстановитьТипДанных( Тип("Булево"), 4 ) );
	Результат.Колонки.Добавить( "СрокГодности",  УстановитьТипДанных( Тип("Число"), 15, 0 ) );
	Результат.Колонки.Добавить( "ЕдиницаИзмеренияСрокаГодности", УстановитьТипДанных( Тип("ПеречислениеСсылка.ЕдиницыИзмеренияВремени") ) );
	Результат.Колонки.Добавить( "ЕстьТоварыДругогоКачества", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ИмпортнаяАлкогольнаяПродукция", УстановитьТипДанных( Тип("Булево"), 4 ) );
	Результат.Колонки.Добавить( "ДлинаИспользовать", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ДлинаМожноУказыватьВДокументах", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ИспользованиеХарактеристик", УстановитьТипДанных( Тип("ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры") ) );
	Результат.Колонки.Добавить( "ИспользоватьИндивидуальныйШаблонЦенника", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ИспользоватьИндивидуальныйШаблонЭтикетки", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ИспользоватьУпаковки", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "Качество", УстановитьТипДанных( Тип("ПеречислениеСсылка.ГрадацииКачества") ) );
	//Результат.Колонки.Добавить( "КодДляПоиска", УстановитьТипДанных( Тип("Строка"), 11 ) );
	Результат.Колонки.Добавить( "Марка", УстановитьТипДанных( Тип("Строка"), 100 ) );
	//Результат.Колонки.Добавить( "НаборУпаковок", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Результат.Колонки.Добавить( "ПодакцизныйТовар", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ПоставляетсяВМногооборотнойТаре", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "Производитель", УстановитьТипДанных( Тип("Строка"), 150 ) );
	Результат.Колонки.Добавить( "СтавкаНДС", УстановитьТипДанных( Тип("ПеречислениеСсылка.СтавкиНДС") ) );
	//Результат.Колонки.Добавить( "ТипНоменклатуры", УстановитьТипДанных( Тип("ПеречислениеСсылка.ТипыНоменклатуры") ) );
	Результат.Колонки.Добавить( "ОбъемИспользовать", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ОбъемМожноУказыватьВДокументах", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ПлощадьИспользовать", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ПлощадьМожноУказыватьВДокументах", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ЕдиницаДляОтчетов", УстановитьТипДанных( Тип("Строка"), 4 ) );
	Результат.Колонки.Добавить( "КоэффициентЕдиницыДляОтчетов", УстановитьТипДанных( Тип("Число"), 15, 3 ) );
	Результат.Колонки.Добавить( "ОбособленнаяЗакупкаПродажа", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ОблагаетсяНДПИПоПроцентнойСтавке", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "ОсобенностьУчета", УстановитьТипДанных( Тип("ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры") ) );
	Результат.Колонки.Добавить( "ПродукцияМаркируемаяДляГИСМ", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "КиЗГИСМ", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "УдалитьСырьевойТовар", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "Наименование", УстановитьТипДанных( Тип("Строка"), 100 ) );
	Результат.Колонки.Добавить( "MODCOMM_ТФО", УстановитьТипДанных( Тип("Строка"), 32 ) );
	
	Возврат Результат;
КонецФункции
Функция ДополнительныеРеквизитыТаблицаЗначений()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить( "MODCOMM_ТФО", УстановитьТипДанных( Тип("Строка"), 32 ) );
	Результат.Колонки.Добавить( "Свойство", УстановитьТипДанных( Тип("Строка"), 100 ) );
	Результат.Колонки.Добавить( "Значение", УстановитьТипДанных( Тип("Строка"), 50 ) );
	
	Возврат Результат;
	
КонецФункции
Функция ШтрихкодыТаблицаЗначений()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить( "MODCOMM_ТФО", УстановитьТипДанных( Тип("Строка"), 32 ) );
	Результат.Колонки.Добавить( "Штрихкод", УстановитьТипДанных( Тип("Строка"), 200 ) );
	Результат.Колонки.Добавить( "Упаковка", УстановитьТипДанных( Тип("Строка"), 4 ) );
	
	Возврат Результат;
	
КонецФункции
Функция МаркаПроизводительТаблицаЗначений()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить( "Марка", УстановитьТипДанных( Тип("Строка"), 100 ) );
	Результат.Колонки.Добавить( "Производитель", УстановитьТипДанных( Тип("Строка"), 150 ) );
	
	Возврат Результат;
	
КонецФункции
Функция УпаковкиТаблицаЗначений()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить( "Владелец", УстановитьТипДанных( Тип("Строка"), 32 ) );
	Результат.Колонки.Добавить( "Наименование", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Результат.Колонки.Добавить( "Безразмерная", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "Вес", УстановитьТипДанных( Тип("Число"), 15, 3 ) );
	Результат.Колонки.Добавить( "ВесЕдиницаИзмерения", УстановитьТипДанных( Тип("Строка"), 4 ) );
	Результат.Колонки.Добавить( "Высота", УстановитьТипДанных( Тип("Число"), 15, 3 ) );
	Результат.Колонки.Добавить( "ВысотаЕдиницаИзмерения", УстановитьТипДанных( Тип("Строка"), 4 ) );
	Результат.Колонки.Добавить( "Глубина", УстановитьТипДанных( Тип("Число"), 15, 3 ) );
	Результат.Колонки.Добавить( "ГлубинаЕдиницаИзмерения", УстановитьТипДанных( Тип("Строка"), 4 ) );
	Результат.Колонки.Добавить( "ЕдиницаИзмерения", УстановитьТипДанных( Тип("Строка"), 4 ) );
	Результат.Колонки.Добавить( "Числитель", УстановитьТипДанных( Тип("Число"), 15, 3 ) );
	Результат.Колонки.Добавить( "Знаменатель", УстановитьТипДанных( Тип("Число"), 15, 3 ) );
	Результат.Колонки.Добавить( "ЛинейныеРазмерыПредставление", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Результат.Колонки.Добавить( "Объем", УстановитьТипДанных( Тип("Число"), 18, 6 ) );
	Результат.Колонки.Добавить( "ОбъемЕдиницаИзмерения", УстановитьТипДанных( Тип("Строка"), 4 ) );
	Результат.Колонки.Добавить( "СкладскаяГруппа", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Результат.Колонки.Добавить( "Типоразмер", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Результат.Колонки.Добавить( "Ширина", УстановитьТипДанных( Тип("Число"), 15, 3 ) );
	Результат.Колонки.Добавить( "ШиринаЕдиницаИзмерения", УстановитьТипДанных( Тип("Строка"), 4 ) );
	Результат.Колонки.Добавить( "КоличествоУпаковок", УстановитьТипДанных( Тип("Число"), 10, 0 ) );
	Результат.Колонки.Добавить( "ПоставляетсяВМногооборотнойТаре", УстановитьТипДанных( Тип("Булево") ) );
	Результат.Колонки.Добавить( "НоменклатураМногооборотнаяТара", УстановитьТипДанных( Тип("Строка"), 100 ) );
	Результат.Колонки.Добавить( "ХарактеристикаМногооборотнаяТара", УстановитьТипДанных( Тип("Строка"), 150 ) );
	Результат.Колонки.Добавить( "МинимальноеКоличествоУпаковокМногооборотнойТары", УстановитьТипДанных( Тип("Число"), 10, 0 ) );
	Результат.Колонки.Добавить( "ТипИзмеряемойВеличины", УстановитьТипДанных( Тип("ПеречислениеСсылка.ТипыИзмеряемыхВеличин") ) );
	Результат.Колонки.Добавить( "НаименованиеПолное", УстановитьТипДанных( Тип("Строка"), 100 ) );
	Результат.Колонки.Добавить( "МеждународноеСокращение", УстановитьТипДанных( Тип("Строка"), 3 ) );
	Результат.Колонки.Добавить( "ТипУпаковки", УстановитьТипДанных( Тип("ПеречислениеСсылка.ТипыУпаковокНоменклатуры") ) );
	
	Возврат Результат;
	
КонецФункции


Функция ПараметрыЗагрузки()
	
	Результат = Новый Структура;
	
	Результат.Вставить( "Данные" );         // Массив полей временной таблицы
	Результат.Вставить( "Параметр" );       // Строка имя параметра в запросе
	Результат.Вставить( "Имя" );       		// Имя временной таблицы в запросе
	Результат.Вставить( "Таблица1С" );      // Объект метаданных 
	Результат.Вставить( "Алиас" );			// Алиас объекта метадынных	
	Результат.Вставить( "Поле", "Ссылка" ); // Реквизит, результат восстановления
	Результат.Вставить( "ОбщиеПоля" );		// Ключ, реквизит по которому будет находиться значение
	Результат.Вставить( "Восстановить" );	// Восстаноавливаемые значения 	
	
	Возврат Результат;
	
КонецФункции
Функция ВосстанавливаемыеДанныеТаблицаЗначений()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить( "Свойство" );
	Результат.Колонки.Добавить( "Ключ" );
	Результат.Колонки.Добавить( "ТипОбъекта" );
	Результат.Колонки.Добавить( "Объект" );
	Результат.Колонки.Добавить( "Алиас" );
	Результат.Колонки.Добавить( "Значение" );
	
	Возврат Результат;
КонецФункции
Процедура ЗаполнитьВосстанавливаемыеДанные( СтруктураВосстанавливаемыхДанных, НаборДанных = Неопределено )
	
	Если НаборДанных = "Партнеры" Или НаборДанных = Неопределено Тогда
		// Партнеры
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "ГруппаДоступа"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Наименование"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "ГруппыДоступаПартнеров"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "ГруппыДоступаПартнеров"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "ОсновнойМенеджер"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Наименование"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "Пользователи"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "Пользователи"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "БизнесРегион"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Наименование"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "БизнесРегионы"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "БизнесРегионы"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
	КонецЕсли;
	
	Если НаборДанных = "Контрагенты" Или НаборДанных = Неопределено Тогда
		
		// Контрагенты
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "Партнер"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Наименование"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "Партнеры"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "Партнеры"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "СтранаРегистрации"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Код"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "СтраныМира"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "СтраныМира"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
	КонецЕсли;
	
	
	Если НаборДанных = "РассчетныеСчета" Или НаборДанных = Неопределено Тогда
		// Расчетные счета
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "Владелец"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "ИНН"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "Контрагенты"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "Контрагенты"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "Банк"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Код"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "КлассификаторБанков"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "КлассификаторБанков"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "ВалютаДенежныхСредств"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Код"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "Валюты"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "Валюты"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
	КонецЕсли;
	
	Если НаборДанных = "Договоры" Или НаборДанных = Неопределено Тогда
		// Договоры
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "ВалютаВзаиморасчетов"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Код"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "Валюты"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "Валюты"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "СтатьяДвиженияДенежныхСредств"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Код"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "СтатьиДвиженияДенежныхСредств"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "СтатьиДДС"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "Организация"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "ИНН"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "Организации"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "Организации"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "Контрагент"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "ИНН"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "Контрагенты"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "Контрагенты"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
	КонецЕсли;
	
	Если НаборДанных = "Номенклатура" Или НаборДанных = Неопределено Тогда
		// Номенклатура
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "Владелец"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "MODCOMM_ТФО"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "Номенклатура"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "Номенклатура"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "ЕдиницаИзмерения"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Код"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "УпаковкиЕдиницыИзмерения"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "УпаковкиЕдиницыИзмерения"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "ВесЕдиницаИзмерения"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Код"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "УпаковкиЕдиницыИзмерения"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "ВесЕдиницыИзмерения"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "ВысотаЕдиницаИзмерения"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Код"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "УпаковкиЕдиницыИзмерения"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "ВысотаЕдиницыИзмерения"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "ГлубинаЕдиницаИзмерения"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Код"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "УпаковкиЕдиницыИзмерения"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "ГлубинаЕдиницыИзмерения"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "ШиринаЕдиницаИзмерения"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Код"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "УпаковкиЕдиницыИзмерения"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "ШиринаЕдиницыИзмерения"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "ОбъемЕдиницаИзмерения"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Код"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "УпаковкиЕдиницыИзмерения"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "ОбъемЕдиницыИзмерения"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "ВидНоменклатуры"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Наименование"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "ВидыНоменклатуры"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "ВидыНоменклатуры"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "Марка"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Наименование"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "Марки"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "Марки"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		ИнформацияОВосстановлении = СтруктураВосстанавливаемыхДанных.Добавить();
		ИнформацияОВосстановлении.Свойство = "Производитель"; // Пришло свойство
		ИнформацияОВосстановлении.Ключ = "Наименование"; // Искать по этому реквизиту
		ИнформацияОВосстановлении.ТипОбъекта = "Справочник"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Объект = "Производители"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Алиас = "Производители"; // Искать в этом объекте метаданных
		ИнформацияОВосстановлении.Значение = "Ссылка"; // Вернуть этот реквизит
		
		
	КонецЕсли;
КонецПроцедуры

Функция ВосстановитьДополнительныеРеквизитыНоменклатуры( Данные ) 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДопРеквизиты.MODCOMM_ТФО КАК MODCOMM_ТФО,
	|	ДопРеквизиты.Свойство КАК Свойство,
	|	ДопРеквизиты.Значение КАК Значение
	|ПОМЕСТИТЬ ВТ_ДопРеквизиты
	|ИЗ
	|	&ТаблицаВременныхДополнительныхРеквизитов КАК ДопРеквизиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДопРеквизиты.MODCOMM_ТФО КАК MODCOMM_ТФО,
	|	ЕСТЬNULL(ЗначенияСвойствОбъектов.Ссылка, ВТ_ДопРеквизиты.Значение) КАК Значение,
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Свойство
	|ИЗ
	|	ВТ_ДопРеквизиты КАК ВТ_ДопРеквизиты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО (ВТ_ДопРеквизиты.Свойство = ДополнительныеРеквизитыИСведения.Имя)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|		ПО (ВТ_ДопРеквизиты.Значение = ЗначенияСвойствОбъектов.Наименование)
	|			И (ЗначенияСвойствОбъектов.Владелец.Ссылка = ДополнительныеРеквизитыИСведения.Ссылка)";
	
	Запрос.УстановитьПараметр( "ТаблицаВременныхДополнительныхРеквизитов", Данные );
	Попытка
		Результат = Запрос.Выполнить().Выгрузить( ОбходРезультатаЗапроса.Прямой );
	Исключение
		Результат = Новый ТаблицаЗначений;
	КонецПопытки;
	
	Возврат Результат; 	
КонецФункции
Функция ПолучитьДополнительныеРеквизитыПоНоменклатуре( Номенклатура, Данные )
	Отбор = Новый Структура();
	Отбор.Вставить( "MODCOMM_ТФО", Номенклатура );
	
	Результат = Данные.НайтиСтроки(Отбор);
	
	Возврат Результат;
КонецФункции

Функция ВосстановитьШтрихкоды( Данные )
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВременныеШтрихкоды.MODCOMM_ТФО КАК MODCOMM_ТФО,
	|	ВременныеШтрихкоды.Штрихкод КАК Штрихкод,
	|	ВременныеШтрихкоды.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ВТ_Штрихкоды
	|ИЗ
	|	&ТаблицаВременныхШтрихкодов КАК ВременныеШтрихкоды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	ВТ_Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	ВТ_Штрихкоды КАК ВТ_Штрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО (ВТ_Штрихкоды.Упаковка = УпаковкиЕдиницыИзмерения.Код)
	|			И (УпаковкиЕдиницыИзмерения.Владелец ССЫЛКА Справочник.НаборыУпаковок)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.MODCOMM_ТФО = ВТ_Штрихкоды.MODCOMM_ТФО)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (ВТ_Штрихкоды.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод)
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ NULL 
	|	И НЕ УпаковкиЕдиницыИзмерения.Ссылка ЕСТЬ NULL 
	|	И НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр( "ТаблицаВременныхШтрихкодов", Данные );
	Попытка
		Результат = Запрос.Выполнить().Выгрузить( ОбходРезультатаЗапроса.Прямой );
	Исключение
		Результат = Новый ТаблицаЗначений;
	КонецПопытки;
	
	Возврат Результат; 	
	
КонецФункции

Функция ВосстановитьПроизводителей( Данные, МенеджерВременныхТаблиц )
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ВременныеМаркиПроизводители.Производитель КАК Производитель,
	|	ВременныеМаркиПроизводители.Марка КАК Марка
	|ПОМЕСТИТЬ ВТ_МаркиПроизводители
	|ИЗ
	|	&ТаблицаВременныхМаркиПроизводители КАК ВременныеМаркиПроизводители
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Производители.Ссылка КАК Ссылка,
	|	ВТ_МаркиПроизводители.Производитель КАК Производитель
	|ПОМЕСТИТЬ ВТ_Производители
	|ИЗ
	|	ВТ_МаркиПроизводители КАК ВТ_МаркиПроизводители
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Производители КАК Производители
	|		ПО ВТ_МаркиПроизводители.Производитель = Производители.Наименование
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_МаркиПроизводители.Производитель,
	|	Производители.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Производители.Производитель КАК Производитель
	|ИЗ
	|	ВТ_Производители КАК ВТ_Производители
	|ГДЕ		
	|	ВТ_Производители.Ссылка ЕСТЬ NULL;";
	
	Запрос.УстановитьПараметр( "ТаблицаВременныхМаркиПроизводители", Данные );
	
	Попытка
		Результат = Запрос.Выполнить().Выгрузить( ОбходРезультатаЗапроса.Прямой );
	Исключение
		Результат = Новый ТаблицаЗначений;
	КонецПопытки;
	
	Возврат Результат; 	
	
КонецФункции

Функция ВосстановитьМарки( МенеджерВременныхТаблиц )
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Производители.Ссылка КАК Производитель,
	|	ВТ_МаркиПроизводители.Марка КАК Марка
	|ИЗ
	|	ВТ_МаркиПроизводители КАК ВТ_МаркиПроизводители
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Производители КАК Производители
	|		ПО (ВТ_МаркиПроизводители.Производитель = Производители.Наименование)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Марки КАК Марки
	|		ПО (ВТ_МаркиПроизводители.Марка = Марки.Наименование)
	|			И (Производители.Ссылка = Марки.Производитель)
	|ГДЕ
	|	Марки.Ссылка ЕСТЬ NULL;";
	
	Попытка
		Результат = Запрос.Выполнить().Выгрузить( ОбходРезультатаЗапроса.Прямой );
	Исключение
		Результат = Новый ТаблицаЗначений;
	КонецПопытки;
	
	Возврат Результат; 	
КонецФункции

Функция ВосстановитьУпаковки( Данные )
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВременныеШтрихкоды.MODCOMM_ТФО КАК MODCOMM_ТФО,
	|	ВременныеШтрихкоды.Штрихкод КАК Штрихкод,
	|	ВременныеШтрихкоды.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ ВТ_Штрихкоды
	|ИЗ
	|	&ТаблицаВременныхШтрихкодов КАК ВременныеУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	УпаковкиЕдиницыИзмерения.Ссылка КАК Упаковка,
	|	ВТ_Штрихкоды.Штрихкод КАК Штрихкод
	|ИЗ
	|	ВТ_Штрихкоды КАК ВТ_Штрихкоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
	|		ПО (ВТ_Штрихкоды.Упаковка = УпаковкиЕдиницыИзмерения.Код)
	|			И (УпаковкиЕдиницыИзмерения.Владелец ССЫЛКА Справочник.НаборыУпаковок)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.MODCOMM_ТФО = ВТ_Штрихкоды.MODCOMM_ТФО)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (ВТ_Штрихкоды.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод)
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод ЕСТЬ NULL 
	|	И НЕ УпаковкиЕдиницыИзмерения.Ссылка ЕСТЬ NULL 
	|	И НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр( "ТаблицаВременныхШтрихкодов", Данные );
	Попытка
		Результат = Запрос.Выполнить().Выгрузить( ОбходРезультатаЗапроса.Прямой );
	Исключение
		Результат = Новый ТаблицаЗначений;
	КонецПопытки;
	
	Возврат Результат; 	
	
	
КонецФункции


// Это самая волшебная функция на свете!!!
//Функция 

Функция СоздатьЗапросТаблицаЗначенийВоВременнуюТаблицу( ПараметрыДанных )
	
	Префикс = "ВТ_";
	СтрокиЗапроса = Новый Массив;
	СоединенияТаблиц = Новый Массив;
	
	Если ТипЗнч( ПараметрыДанных.ОбщиеПоля ) = Тип("Строка") Тогда 
		ОбщиеПоля = СтрРазделить( ПараметрыДанных.ОбщиеПоля, ",", Ложь );
	ИначеЕсли ТипЗнч( ПараметрыДанных.ОбщиеПоля ) = Тип("Массив") Тогда 
		ОбщиеПоля = ПараметрыДанных.ОбщиеПоля;
	КонецЕсли;
	
	
	
	СтрокиЗапроса.Добавить( "ВЫБРАТЬ" );
	Счетчик = 0;
	Для Каждого Элемент Из ПараметрыДанных.Данные Цикл 
		Счетчик = Счетчик + 1;
		СтрокиЗапроса.Добавить( ПараметрыДанных.Имя + "." + Элемент.Имя + " КАК " + Элемент.Имя + ?(Счетчик = ПараметрыДанных.Данные.Количество(), "", ",") );
	КонецЦикла;	
	СтрокиЗапроса.Добавить( "ПОМЕСТИТЬ " + Префикс + ПараметрыДанных.Имя );
	СтрокиЗапроса.Добавить( "ИЗ" );
	СтрокиЗапроса.Добавить( "&" + ПараметрыДанных.Параметр + " КАК " + ПараметрыДанных.Имя + ";" );
	СтрокиЗапроса.Добавить( "ВЫБРАТЬ" );
	СтрокиЗапроса.Добавить( ПараметрыДанных.Алиас + "." + ПараметрыДанных.Поле + " КАК " + ПараметрыДанных.Поле + "," );
	
	Счетчик = 0;
	Для Каждого Элемент Из ПараметрыДанных.Данные Цикл
		Счетчик = Счетчик + 1;
		
		СтрокаВосстановления = ПараметрыДанных.Восстановить.Найти( Элемент.Имя, "Свойство" );
		Если СтрокаВосстановления = Неопределено Тогда 
			СтрокиЗапроса.Добавить( Префикс + ПараметрыДанных.Имя + "." + Элемент.Имя + " КАК " + Элемент.Имя + ?(Счетчик = ПараметрыДанных.Данные.Количество(), "", ",") );
		Иначе
			СтрокиЗапроса.Добавить( СтрокаВосстановления.Алиас + "." + СтрокаВосстановления.Значение + " КАК " + Элемент.Имя + ?(Счетчик = ПараметрыДанных.Данные.Количество(), "", ",") ); 	
			СоединенияТаблиц.Добавить( "ЛЕВОЕ СОЕДИНЕНИЕ " + СтрокаВосстановления.ТипОбъекта + "." + СтрокаВосстановления.Объект + " КАК " + СтрокаВосстановления.Алиас );
			СоединенияТаблиц.Добавить( "ПО (" + Префикс + ПараметрыДанных.Имя + "." + Элемент.Имя + " = " + СтрокаВосстановления.Алиас + "." + СтрокаВосстановления.Ключ + ")" );
		КонецЕсли;
		
	КонецЦикла;
	СтрокиЗапроса.Добавить( "ИЗ" );
	СтрокиЗапроса.Добавить( Префикс + ПараметрыДанных.Имя + " КАК " +  Префикс + ПараметрыДанных.Имя );
	СтрокиЗапроса.Добавить( "ЛЕВОЕ СОЕДИНЕНИЕ " + ПараметрыДанных.Таблица1С + " КАК " + ПараметрыДанных.Алиас );
	СтрокиЗапроса.Добавить( "ПО ( " );
	
	Для Итератор = 0 По ОбщиеПоля.Количество() - 1 Цикл
		
		Если ТипЗнч( ОбщиеПоля[Итератор] ) = Тип("Строка") Тогда
			СтрокиЗапроса.Добавить( ПараметрыДанных.Алиас + "." + ОбщиеПоля[Итератор] + " = " + Префикс + ПараметрыДанных.Имя + "." + ОбщиеПоля[Итератор] ); 
		ИначеЕсли ТипЗнч( ОбщиеПоля[Итератор] ) = Тип("Структура") Тогда
			
			СтрокиЗапроса.Добавить( ПараметрыДанных.Алиас + "." + ОбщиеПоля[Итератор].Реквизит + ?(ПустаяСтрока(ОбщиеПоля[Итератор].Левый), "", "." + ОбщиеПоля[Итератор].Левый ) + " = " + Префикс + ПараметрыДанных.Имя + "." + ОбщиеПоля[Итератор].Реквизит + ?(ПустаяСтрока(ОбщиеПоля[Итератор].Правый), "", "." + ОбщиеПоля[Итератор].Правый ) ); 
			
		КонецЕсли;
		
		Если Итератор < ОбщиеПоля.Количество() - 1 Тогда
			СтрокиЗапроса.Добавить( " И " );
		КонецЕсли;
	КонецЦикла;
	
	СтрокиЗапроса.Добавить( " )" );
	
	// Добавляем соединения таблиц для восстановления реквизитов
	Для Итератор = 0 По СоединенияТаблиц.Количество() - 1 Цикл
		СтрокиЗапроса.Добавить( СоединенияТаблиц[Итератор] );		
	КонецЦикла;
	
	СтрокиЗапроса.Добавить( "УПОРЯДОЧИТЬ ПО" );
	СтрокиЗапроса.Добавить( ПараметрыДанных.Поле + " УБЫВ" );
	
	Возврат СтрСоединить( СтрокиЗапроса, " " );
	
КонецФункции
Функция ВыполнитьВолшебныйЗапрос( ПараметрыДанных, Данные, Результат )
	Запрос = Новый Запрос;
	Запрос.Текст = СоздатьЗапросТаблицаЗначенийВоВременнуюТаблицу( ПараметрыДанных );
	Запрос.УстановитьПараметр( ПараметрыДанных.Параметр, Данные );
	Попытка
		Результат.Объекты.Добавить( Запрос.Текст );
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		Результат.Объекты.Добавить( ОписаниеОшибки() );
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Выборка;
КонецФункции

// Функция обрабатывает GET запрос /persons
Функция ФизическиеЛицаПолучить(Запрос)
	
	Режим = Запрос.ПараметрыЗапроса.Получить("mode");
	Если Режим = "all" Тогда
		
		ЗапросКБазе = Новый Запрос;
		ЗапросКБазе.Текст = "ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка.Наименование КАК Наименование,
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка.ДатаРождения КАК ДатаРождения,
		|	ПРЕДСТАВЛЕНИЕ(ФизическиеЛицаКонтактнаяИнформация.Ссылка.Пол) КАК Пол,
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка.ИНН КАК ИНН,
		|	ФизическиеЛицаКонтактнаяИнформация.Тип КАК Тип,
		|	ФизическиеЛицаКонтактнаяИнформация.Вид КАК Вид,
		|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление,
		|	ФизическиеЛицаКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ФизическиеЛицаКонтактнаяИнформация.Страна КАК Страна,
		|	ФизическиеЛицаКонтактнаяИнформация.Регион КАК Регион,
		|	ФизическиеЛицаКонтактнаяИнформация.Город КАК Город,
		|	ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
		|	ФизическиеЛицаКонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
		|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|	ФизическиеЛицаКонтактнаяИнформация.ВидДляСписка КАК ВидДляСписка
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		
		
		СписокФизическихЛиц = Новый Массив;
		СписокСвойствКонтактнойИнформации = "Тип,Вид,Представление,ЗначенияПолей,Страна,Регион,Город,АдресЭП,ДоменноеИмяСервера,НомерТелефона,НомерТелефонаБезКодов,ВидДляСписка";
		ШаблонКонтактнойИнформации = MODCOMM_ОбщегоНазначения.КоллекцияКолонокТаблицыЗначенийВСтруктуру( КонтактнаяИнформацияТаблицаЗначений().Колонки, СписокСвойствКонтактнойИнформации );
		
		Выборка = ЗапросКБазе.Выполнить().Выбрать();
		ФизическоеЛицо = Неопределено;
		СтароеНаименование = "";
		Пока Выборка.Следующий() Цикл 
			
			Если СтароеНаименование <> Выборка.Наименование Тогда
				
				Если Не ПустаяСтрока( СтароеНаименование ) Тогда
					СписокФизическихЛиц.Добавить( ФизическоеЛицо ); 	
				КонецЕсли;
				
				
				ФИО = СтрРазделить( Выборка.Наименование, " ", Ложь );
				
				ФизическоеЛицо = Новый Структура;
				ФизическоеЛицо.Вставить( "Фамилия", ?(ФИО.Количество() > 0, ФИО[0], "") );
				ФизическоеЛицо.Вставить( "Имя", ?(ФИО.Количество() > 1, ФИО[1], "") );
				ФизическоеЛицо.Вставить( "Отчество", ?(ФИО.Количество() > 2, ФИО[2], "") );
				ФизическоеЛицо.Вставить( "ДатаРождения", Формат( Выборка.ДатаРождения, "ДФ=ггггММддЧЧммсс") );
				ФизическоеЛицо.Вставить( "Пол", Выборка.Пол );
				ФизическоеЛицо.Вставить( "ИНН", Выборка.ИНН );
				ФизическоеЛицо.Вставить( "СНИЛС", "" );
				ФизическоеЛицо.Вставить( "КонтактнаяИнформация", Новый Массив );
				
			КонецЕсли;
			
			КонтактнаяИнформация = ШаблонКонтактнойИнформации;			
			ЗаполнитьЗначенияСвойств( КонтактнаяИнформация, Выборка, СписокСвойствКонтактнойИнформации ); 
			ФизическоеЛицо.КонтактнаяИнформация.Добавить( КонтактнаяИнформация ); 
			
			СтароеНаименование = Выборка.Наименование;
		КонецЦикла;
		
		Если ФизическоеЛицо <> Неопределено Тогда
			СписокФизическихЛиц.Добавить( ФизическоеЛицо );
		КонецЕсли;
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить( "Content-Type", "application/json; charset=utf-8" );
	Ответ.УстановитьТелоИзСтроки( MODCOMM_ОбщегоНазначения.ПолучитьСтрокуJSONИзСтруктуры( СписокФизическихЛиц ) );
	
	Возврат Ответ;
КонецФункции
// Функция обрабатывает POST запрос /persons
Функция ФизическиеЛицаЗаписать(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Получаем объект в котором содержится результат работы процедур
	РезультатРаботы = MODCOMM_ОбщегоНазначения.СтруктураРезультатаОбработок("Загрузка Физических лиц");
	
	СтрокаJSON = Запрос.ПолучитьТелоКакСтроку();
	ФизическиеЛица = MODCOMM_ОбщегоНазначения.ПолучитьСтруктуруИзСтрокиJSON( СтрокаJSON );	
	Если ФизическиеЛица = Неопределено Или ТипЗнч(ФизическиеЛица) <> Тип("Массив")  Тогда 
		// Неверный формат JSON
		РезультатРаботы.НомерОшибки = 2001;
		РезультатРаботы.ТекстОшибки = "Не удалось получить структуру из строки JSON"; 
		РезультатРаботы.Объекты.Добавить( СтрокаJSON );
		
		Ответ.УстановитьТелоИзСтроки( MODCOMM_ОбщегоНазначения.ПолучитьСтрокуJSONИзСтруктуры(РезультатРаботы) ); 
		Возврат Ответ; 
	КонецЕсли;
	
	
	Люди = Новый ТаблицаЗначений;
	Люди.Колонки.Добавить( "Наименование", УстановитьТипДанных( Тип("Строка"), 50 ) );
	Люди.Колонки.Добавить( "ДатаРождения", УстановитьТипДанных( Тип("Дата") ) );
	Люди.Колонки.Добавить( "Пол", УстановитьТипДанных( Тип("ПеречислениеСсылка.ПолФизическогоЛица") ) );
	Люди.Колонки.Добавить( "ИНН",  УстановитьТипДанных( Тип("Строка"), 12 ) );
	
	// Создание таблицы значений контактной информации
	КонтактнаяИнформация = КонтактнаяИнформацияТаблицаЗначений();	
	КонтактнаяИнформация.Колонки.Добавить( "Наименование", УстановитьТипДанных( Тип("Строка"), 50 ) );
	
	// Вид контактной информации нужно искать в рамках справочника Физических лиц
	Родитель = Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица;
	
	// Восстанавливаем объекты 1С из загруженного JSON файла
	Для Каждого ФизическоеЛицо Из ФизическиеЛица Цикл 
		
		РезультатРаботы.Сохранить = Истина;
		
		Человек = Люди.Добавить();
		Человек.Наименование = СокрЛП( СокрЛП(ФизическоеЛицо.Фамилия) + " " + СокрЛП(ФизическоеЛицо.Имя) + " " + СокрЛП(ФизическоеЛицо.Отчество) );  
		Человек.ДатаРождения = ?( СтрДлина(ФизическоеЛицо.ДатаРождения) = 14, Дата( ФизическоеЛицо.ДатаРождения ), Неопределено );
		Человек.Пол = MODCOMM_ОбщегоНазначения.ЗначениеПеречисленияПоСинониму( "ПолФизическогоЛица", ФизическоеЛицо.Пол );
		Человек.ИНН = ФизическоеЛицо.ИНН;
		
		Если ПустаяСтрока( ФизическоеЛицо.Фамилия ) Или ПустаяСтрока( ФизическоеЛицо.Имя ) Или ПустаяСтрока( ФизическоеЛицо.Отчество ) Тогда 
			
			РезультатРаботы.Объекты.Добавить( "Неполное ФИО: " + Человек.Наименование );
			РезультатРаботы.Сохранить = Ложь;
			
		КонецЕсли;
		
		// Если Основной объект восстановился без ошибок, то продолжаем заполнять табличные части
		Если РезультатРаботы.Сохранить Тогда
			
			Для Каждого КИ Из ФизическоеЛицо.КонтактнаяИнформация Цикл 
				
				РезультатРаботы.Сохранить = Истина;
				ТипКонтактнойИнформации = MODCOMM_ОбщегоНазначения.ЗначениеПеречисленияПоСинониму( "ТипыКонтактнойИнформации", КИ.Тип );
				
				ЧеловекКонтактнаяИнформация = КонтактнаяИнформация.Добавить();
				ЧеловекКонтактнаяИнформация.Наименование = Человек.Наименование;
				ЧеловекКонтактнаяИнформация.Тип = ТипКонтактнойИнформации;
				ЧеловекКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию( КИ.Вид, Истина, Родитель );
				ЧеловекКонтактнаяИнформация.Представление = КИ.Представление;
				ЧеловекКонтактнаяИнформация.ЗначенияПолей = КИ.ЗначенияПолей;
				ЧеловекКонтактнаяИнформация.Страна = КИ.Страна;
				ЧеловекКонтактнаяИнформация.Регион = КИ.Регион;
				ЧеловекКонтактнаяИнформация.Город = КИ.Город;
				ЧеловекКонтактнаяИнформация.АдресЭП = КИ.АдресЭП;
				ЧеловекКонтактнаяИнформация.ДоменноеИмяСервера = КИ.ДоменноеИмяСервера;
				ЧеловекКонтактнаяИнформация.НомерТелефона = КИ.НомерТелефона;
				ЧеловекКонтактнаяИнформация.НомерТелефонаБезКодов = КИ.НомерТелефонаБезКодов;
				ЧеловекКонтактнаяИнформация.ВидДляСписка = ЧеловекКонтактнаяИнформация.Вид;
				
				// Проверка на неверный тип контактной информации
				Если ТипКонтактнойИнформации = Неопределено Тогда
					
					//РезультатРаботы.Объекты.Добавить( "Неверный тип контактной информации: " + КИ.Тип );
					РезультатРаботы.Сохранить = Ложь;
					
				КонецЕсли;
				// Проверка на отсутсвующий вид контактной информации
				Если ЧеловекКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка() Тогда
					
					//РезультатРаботы.Объекты.Добавить( "Неверный вид контактной информации: " + КИ.Вид );
					РезультатРаботы.Сохранить = Ложь;
					
				КонецЕсли;
				
				// Выносим то, что было с ошибкой
				Если Не РезультатРаботы.Сохранить Тогда	
					КонтактнаяИнформация.Удалить( ЧеловекКонтактнаяИнформация );	
				КонецЕсли;			
				
			КонецЦикла;	// Контактная информация	
			
		Иначе 
			Люди.Удалить( Человек );
		КонецЕсли;
		
	КонецЦикла; // Физические лица
	
	// Добавляем индекс для быстрого отбора Контактной информации
	КонтактнаяИнформация.Индексы.Добавить( "Наименование" );
	
	
	// Сразу получаем ссылки на объекты, которые нужно обновить, где ссылки пустые нужно создать новый объект 
	ЗапросКБазе = Новый Запрос;
	ЗапросКБазе.Текст = "ВЫБРАТЬ
	|	Люди.Наименование КАК Наименование,
	|	Люди.ДатаРождения КАК ДатаРождения,
	|	Люди.Пол КАК Пол,
	|	Люди.ИНН КАК ИНН
	|ПОМЕСТИТЬ ВТ_Люди
	|ИЗ
	|	&ТаблицаЛюдей КАК Люди
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ВТ_Люди.Наименование КАК Наименование,
	|	ВТ_Люди.ДатаРождения КАК ДатаРождения,
	|	ВТ_Люди.Пол КАК Пол,
	|	ВТ_Люди.ИНН КАК ИНН
	|ИЗ
	|	ВТ_Люди КАК ВТ_Люди
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО (ФизическиеЛица.Наименование = ВТ_Люди.Наименование)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка УБЫВ";
	
	ЗапросКБазе.УстановитьПараметр( "ТаблицаЛюдей", Люди ); 
	Выборка = ЗапросКБазе.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Отбор = Новый Структура;
		Отбор.Вставить( "Наименование", Выборка.Наименование );
		СтрокиКонтакнойИнформации = КонтактнаяИнформация.НайтиСтроки( Отбор );
		
		Если Не ЗначениеЗаполнено(Выборка.Ссылка) Тогда	
			// Создание нового объекта
			НовоеФизическоеЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
			НовоеФизическоеЛицо.Наименование = Выборка.Наименование;
			
		Иначе
			// Измененение существующего объекта
			НовоеФизическоеЛицо = Выборка.Ссылка.ПолучитьОбъект();
			НовоеФизическоеЛицо.КонтактнаяИнформация.Очистить();
			
		КонецЕсли;
		
		// Процедура заполнения данными 
		ЗаполнитьФизическоеЛицо( НовоеФизическоеЛицо, Выборка, СтрокиКонтакнойИнформации );
		
		// Можно записывать объект
		НовоеФизическоеЛицо.Записать(); 
		
		// Должны вернуть объект в котором будут все сохраненные Физические лица
		РезультатРаботы.СохраненныеОбъекты.Добавить( НовоеФизическоеЛицо.Наименование );
		
	КонецЦикла; // Выборка
	
	// Готовим данные 
	Ответ.Заголовки.Вставить( "Content-Type", "application/json; charset=utf-8" );
	Ответ.УстановитьТелоИзСтроки(  MODCOMM_ОбщегоНазначения.ПолучитьСтрокуJSONИзСтруктуры(РезультатРаботы) ); 
	Возврат Ответ; 
КонецФункции

Функция ФизическиеЛицаУдалить(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Возврат Ответ;
КонецФункции

// Функция - Контрагенты партнеры записать
//
// Параметры:
//  Запрос	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция КонтрагентыПартнерыЗаписать(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Получаем объект в котором содержится результат работы процедур
	РезультатРаботы = MODCOMM_ОбщегоНазначения.СтруктураРезультатаОбработок("Загрузка контрагентов и партнеров");
	
	#Область ПолучениеJSONДанных
	СтрокаJSON = Запрос.ПолучитьТелоКакСтроку();
	КонтрагентыПартнеры = MODCOMM_ОбщегоНазначения.ПолучитьСтруктуруИзСтрокиJSON( СтрокаJSON );	
	Если КонтрагентыПартнеры = Неопределено Или ТипЗнч(КонтрагентыПартнеры) <> Тип("Массив") Тогда 
		// Неверный формат JSON
		РезультатРаботы.НомерОшибки = 2001;
		РезультатРаботы.ТекстОшибки = "Не удалось получить структуру из строки JSON"; 
		РезультатРаботы.Объекты.Добавить( СтрокаJSON );
		
		Ответ.УстановитьТелоИзСтроки( MODCOMM_ОбщегоНазначения.ПолучитьСтрокуJSONИзСтруктуры(РезультатРаботы) ); 
		Возврат Ответ; 
	КонецЕсли;
	#КонецОбласти
	
	#Область ИнициализацияВременныхТаблицы
	
	Контрагенты = КонтрагентыТаблицаЗначений();
	Партнеры = ПартнерыТаблицаЗначений();
	ГоловныеПартнеры = ГоловныеПартнерыТаблицаЗначений();
	ВосстанавливаемыеДанные = ВосстанавливаемыеДанныеТаблицаЗначений();	
	ЗаполнитьВосстанавливаемыеДанные( ВосстанавливаемыеДанные );
	
	КонтактнаяИнформацияКонтрагента = КонтактнаяИнформацияТаблицаЗначений();
	КонтактнаяИнформацияКонтрагента.Колонки.Добавить( "ИНН", УстановитьТипДанных( Тип("Строка"), 12 ) );
	
	КонтактнаяИнформацияПартнера = КонтактнаяИнформацияТаблицаЗначений();
	КонтактнаяИнформацияПартнера.Колонки.Добавить( "Наименование", УстановитьТипДанных( Тип("Строка"), 100 ) );
	
	БанковскиеСчетаКонтрагентов = БанковскиеСчетаТаблицаЗначений();
	
	ДоговорыКонтрагентов = ДоговорыКонтрагентовТаблицаЗначений();
	
	#КонецОбласти 
	
	#Область ЗаполнениеВременныхТаблиц
	
	// Восстанавливаем данные	
	Для Каждого КонтрагентПартнер Из КонтрагентыПартнеры Цикл
		
		РезультатРаботы.Сохранить = Истина;
		
		#Область ЗаполнениеКонтрагентов
		Контрагент = Контрагенты.Добавить();
		Контрагент.Наименование = КонтрагентПартнер.ПубличноеНаименование;
		Контрагент.НаименованиеПолное = КонтрагентПартнер.ПубличноеНаименование;
		Контрагент.ИНН = КонтрагентПартнер.ИНН;
		Контрагент.КПП = КонтрагентПартнер.КПП;
		Контрагент.КодПоОКПО = КонтрагентПартнер.ОКПО;
		Контрагент.ОбособленноеПодразделение = Ложь;
		Контрагент.СтранаРегистрации = КонтрагентПартнер.СтранаРегистрации; // Восстановим с помощью запроса
		Контрагент.РегистрационныйНомер = КонтрагентПартнер.РегистрационныйНомер;
		Контрагент.НалоговыйНомер = КонтрагентПартнер.НалоговыйНомер;
		Контрагент.Партнер = КонтрагентПартнер.РабочееНаименование;
		
		
		// Устанавливаеим тип контрагента, реквизит ЮрФизЛицо
		Если СтрДлина(Контрагент.ИНН) = 10 Тогда
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		ИначеЕсли СтрДлина(Контрагент.ИНН) = 12 Тогда
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		ИначеЕсли Контрагент.СтранаРегистрации <> "643" Тогда
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
		Иначе
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонецЕсли;
		
		
		Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Или Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда   
			
			// Проверяем контрольную сумму ИНН
			Если Не РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям( 
				Контрагент.ИНН, 
				?(СтрДлина(Контрагент.ИНН) = 10, Истина, Ложь), 
				РезультатРаботы.ТекстОшибки ) Тогда
				
				Продолжить;
				
			КонецЕсли; // Проверка ИНН, контрольное число
			
		КонецЕсли;			
		
		// Устанавливаем реквизит ЮридическоеФизическоеЛицо
		Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Или 
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			
			Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;	
		КонецЕсли;
		
		// Заполняем КонтактнуюИнформацию по Контрагентам
		РодительВидаКонтакнойИнформации = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты;		
		Для Каждого Элемент Из КонтрагентПартнер.КонтактнаяИнформация Цикл 
			РезультатРаботы.Сохранить = Истина;
			ТипКонтактнойИнформации = MODCOMM_ОбщегоНазначения.ЗначениеПеречисленияПоСинониму( "ТипыКонтактнойИнформации", Элемент.Тип ); 
			
			НоваяКонтактнаяИнформация = КонтактнаяИнформацияКонтрагента.Добавить();
			НоваяКонтактнаяИнформация.Тип = ТипКонтактнойИнформации;
			НоваяКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию( Элемент.Вид, Истина, РодительВидаКонтакнойИнформации );
			ЗаполнитьЗначенияСвойств( НоваяКонтактнаяИнформация, Элемент, "Представление,ЗначенияПолей,Страна,Регион,Город,АдресЭП,ДоменноеИмяСервера,НомерТелефона,НомерТелефонаБезКодов" );
			НоваяКонтактнаяИнформация.ВидДляСписка = ТипКонтактнойИнформации;
			НоваяКонтактнаяИнформация.ИНН = Контрагент.ИНН;
			
			// Проверка на неверный тип контактной информации
			Если ТипКонтактнойИнформации = Неопределено Тогда
				
				//РезультатРаботы.Объекты.Добавить( "Неверный тип контактной информации: " + Элемент.Тип );
				РезультатРаботы.Сохранить = Ложь;
				
			КонецЕсли;
			// Проверка на отсутсвующий вид контактной информации
			Если НоваяКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка() Тогда
				
				//РезультатРаботы.Объекты.Добавить( "Неверный вид контактной информации: " + Элемент.Вид );
				РезультатРаботы.Сохранить = Ложь;
				
			КонецЕсли;
			
			// Выносим то, что было с ошибкой
			Если Не РезультатРаботы.Сохранить Тогда	
				КонтактнаяИнформацияКонтрагента.Удалить( НоваяКонтактнаяИнформация );	
			КонецЕсли;
			
		КонецЦикла;
		#КонецОбласти
		
		// Убираем дубли КонтактнойИнформации
		КонтактнаяИнформацияКонтрагента.Свернуть( "ИНН,Тип,Вид,Представление,ЗначенияПолей,Страна,Регион,Город,АдресЭП,ДоменноеИмяСервера,НомерТелефона,НомерТелефонаБезКодов,ВидДляСписка" );
		
		// Заполняем Банковские счета
		#Область ЗаполнениеРасчетныхСчетов
		Для Каждого Элемент Из КонтрагентПартнер.РасчетныеСчета Цикл 
			
			БанковскийСчет = БанковскиеСчетаКонтрагентов.Добавить();
			БанковскийСчет.НомерСчета = Элемент.НомерСчета;
			БанковскийСчет.Банк = Элемент.Банк;
			БанковскийСчет.Владелец = КонтрагентПартнер.ИНН;
			БанковскийСчет.ВалютаДенежныхСредств = "643";
			
		КонецЦикла;
		#КонецОбласти
		
		// Заполняем ДоговораКонтрагентов
		#Область ЗаполнениеДоговоровКонтрагентов
		Для Каждого Элемент Из КонтрагентПартнер.Договор Цикл
			
			Договор = ДоговорыКонтрагентов.Добавить();
			Договор.Контрагент = КонтрагентПартнер.ИНН;
			Договор.Партнер = КонтрагентПартнер.РабочееНаименование;
			Договор.Номер = Элемент.Номер;
			Договор.Дата = ?( СтрДлина( Элемент.Дата ) = 14, Дата( Элемент.Дата ), Неопределено );
			Договор.Организация = Элемент.Организация;
			Договор.ОграничиватьСуммуЗадолженности = Элемент.ОграничиватьСуммуЗадолженности;
			Договор.ДопустимаяСуммаЗадолженности = Элемент.ДопустимаяСуммаЗадолженности;
			Договор.ТипДоговора = MODCOMM_ОбщегоНазначения.ЗначениеПеречисленияПоИмени( "ТипыДоговоров", Элемент.ТипДоговора );
			
			Договор.ВалютаВзаиморасчетов = "643";
			Договор.Наименование = "Основной договор";
			Договор.УчетАгентскогоНДС = Ложь;
			Договор.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;
			Договор.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным;
			Договор.Согласован = Истина;
			Договор.Статус = Перечисления.СтатусыДоговоровКонтрагентов.Действует;
			
			Если Договор.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
				Договор.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
				Договор.СтатьяДвиженияДенежныхСредств = "УТ-000005"; // Поступление оплаты от клиента
			КонецЕсли;
			Если Договор.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком Тогда
				Договор.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
				Договор.СтатьяДвиженияДенежныхСредств = "УТ-000006"; // Оплата поставщику
			КонецЕсли;
			Договор.ЗапрещаетсяПросроченнаяЗадолженность = Ложь;
			Договор.УстановленСрокОплаты = Ложь;
			Договор.ЗаданГрафикИсполнения = Ложь;
			Договор.ДоговорСУчастникомГОЗ = Ложь;
			Договор.ПлатежиПо275ФЗ = Ложь;
			Договор.ИностранныйИсполнительВУтвержденномПеречнеГОЗ = Ложь;
			Договор.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			Договор.ВариантОформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеРазделять;
			Договор.ОплатаРасходовПоТарифамСГосрегулированием = Ложь;
			Договор.ВыполненыОбязательстваПоДоговоруГОЗ = Ложь;
			Договор.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
			Договор.СпособДоставки = Перечисления.СпособыДоставки.ОпределяетсяВРаспоряжении;
			
		КонецЦикла;
		#КонецОбласти
		
		
		#Область ЗаполнениеПартнеров
		Партнер = Партнеры.Добавить();
		Партнер.Наименование = КонтрагентПартнер.РабочееНаименование;
		Партнер.НаименованиеПолное = КонтрагентПартнер.ПубличноеНаименование;
		Партнер.ГруппаДоступа = КонтрагентПартнер.ГруппаДоступа; // Восстановим с помощью запроса 
		Партнер.ДатаРегистрации = ?( СтрДлина(КонтрагентПартнер.ДатаРегистрации) = 14, Дата( КонтрагентПартнер.ДатаРегистрации ), Неопределено );
		Партнер.Клиент = КонтрагентПартнер.Клиент;
		Партнер.Поставщик = КонтрагентПартнер.Поставщик;
		Партнер.ПрочиеОтношения = КонтрагентПартнер.ПрочиеОтношения;
		Партнер.Перевозчик = КонтрагентПартнер.Перевозчик;
		Партнер.Комментарий = КонтрагентПартнер.Комментарий;
		Партнер.ОсновнойМенеджер = КонтрагентПартнер.ОсновнойМенеджер; // Восстановим с помощью запроса
		Если Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Иначе
			Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		КонецЕсли;
		
		Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
			Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		КонецЕсли;
		
		// Заполняем КонтактнуюИнформацию по Партнерам
		РодительВидаКонтакнойИнформации = Справочники.ВидыКонтактнойИнформации.СправочникПартнеры;		
		Для Каждого Элемент Из КонтрагентПартнер.КонтактнаяИнформация Цикл 
			РезультатРаботы.Сохранить = Истина;
			ТипКонтактнойИнформации = MODCOMM_ОбщегоНазначения.ЗначениеПеречисленияПоСинониму( "ТипыКонтактнойИнформации", Элемент.Тип ); 
			
			НоваяКонтактнаяИнформация = КонтактнаяИнформацияПартнера.Добавить();
			НоваяКонтактнаяИнформация.Тип = ТипКонтактнойИнформации;
			НоваяКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию( Элемент.Вид, Истина, РодительВидаКонтакнойИнформации );
			ЗаполнитьЗначенияСвойств( НоваяКонтактнаяИнформация, Элемент, "Представление,ЗначенияПолей,Страна,Регион,Город,АдресЭП,ДоменноеИмяСервера,НомерТелефона,НомерТелефонаБезКодов" );
			НоваяКонтактнаяИнформация.ВидДляСписка = ТипКонтактнойИнформации;
			НоваяКонтактнаяИнформация.Наименование = Партнер.Наименование;
			
			// Проверка на неверный тип контактной информации
			Если ТипКонтактнойИнформации = Неопределено Тогда
				
				//РезультатРаботы.Объекты.Добавить( "Неверный тип контактной информации: " + Элемент.Тип );
				РезультатРаботы.Сохранить = Ложь;
				
			КонецЕсли;
			// Проверка на отсутсвующий вид контактной информации
			Если НоваяКонтактнаяИнформация.Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка() Тогда
				
				//РезультатРаботы.Объекты.Добавить( "Неверный вид контактной информации: " + Элемент.Вид );
				РезультатРаботы.Сохранить = Ложь;
				
			КонецЕсли;
			
			// Выносим то, что было с ошибкой
			Если Не РезультатРаботы.Сохранить Тогда	
				КонтактнаяИнформацияПартнера.Удалить( НоваяКонтактнаяИнформация );	
			КонецЕсли;
			
		КонецЦикла;
		#КонецОбласти
		
		// Убираем дубли КонтактнойИнформации
		КонтактнаяИнформацияПартнера.Свернуть( "Наименование,Тип,Вид,Представление,ЗначенияПолей,Страна,Регион,Город,АдресЭП,ДоменноеИмяСервера,НомерТелефона,НомерТелефонаБезКодов,ВидДляСписка" );
		
		
		// Временная таблица, служит для определения необходимости создания Головных партнеров
		#Область ЗаполнениеГоловныеПратнеры
		
		ГоловнойПартнер = ГоловныеПартнеры.Добавить();
		ГоловнойПартнер.ИНН = КонтрагентПартнер.ИНН;
		ГоловнойПартнер.Ссылка = Справочники.Партнеры.ПустаяСсылка();
		ГоловнойПартнер.Количество = 1;
		
		#КонецОбласти
		
	КонецЦикла; // Восстановление
	
	#КонецОбласти
	
	// Загрузка Партнеров
	#Область ЗагрузкаПартнеров
	// Готовим данные для формирования запроса
	ПараметрыДанных = ПараметрыЗагрузки();
	ПараметрыДанных.Данные = Партнеры.Колонки;
	ПараметрыДанных.Параметр = "ТаблицаПартнеров";
	ПараметрыДанных.Имя = "ВременныеПартнеры";
	ПараметрыДанных.Таблица1С = "Справочник.Партнеры";
	ПараметрыДанных.Алиас = "Партнеры";
	ПараметрыДанных.ОбщиеПоля = "Наименование,";
	ПараметрыДанных.Восстановить = ВосстанавливаемыеДанные;
	
	// Инициализация запроса
	ЗапросКБазе = Новый Запрос;
	ЗапросКБазе.Текст = СоздатьЗапросТаблицаЗначенийВоВременнуюТаблицу( ПараметрыДанных );
	ЗапросКБазе.УстановитьПараметр( ПараметрыДанных.Параметр, Партнеры );
	
	// Запускаем адскую машину
	Попытка
		//РезультатРаботы.Объекты.Добавить( ЗапросКБазе.Текст );
		Выборка = ЗапросКБазе.Выполнить().Выбрать();
	Исключение
		РезультатРаботы.Объекты.Добавить( ОписаниеОшибки() );
		РезультатРаботы.Сохранить = Ложь;
	КонецПопытки;
	
	// Обрабатываем полученный результат
	Если РезультатРаботы.Сохранить Тогда 
		
		РезультатРаботы.Объекты.Добавить( Строка(Выборка.Количество()) );
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено( Выборка.Ссылка ) Тогда
				// Добавить Партнера
				
				НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
				НовыйПартнер.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
				ЗаполнитьЗначенияСвойств( НовыйПартнер, Выборка, "Наименование,НаименованиеПолное,Клиент,Поставщик,Перевозчик,ПрочиеОтношения,Конкурент,Комментарий,ОбслуживаетсяТорговымиПредставителями,Пол,ЮрФизЛицо,ГруппаДоступа,ОсновнойМенеджер,ДатаРегистрации" );
				
				// Отбор 
				Отбор = Новый Структура;
				Отбор.Вставить( "Наименование", Выборка.Наименование );
				СтрокиКонтакнойИнформации = КонтактнаяИнформацияПартнера.НайтиСтроки( Отбор );
				
				ЗаполнитьКонтактнуюИнформацию( НовыйПартнер, СтрокиКонтакнойИнформации );
				
				НовыйПартнер.Записать();
				
				//РезультатРаботы.Объекты.Добавить( "Добавлен: " + НовыйПартнер.Код + ":" + НовыйПартнер.Наименование + " " );
				
			Иначе 
				// Изменить Партнера
				
				НовыйПартнер = Выборка.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств( НовыйПартнер, Выборка, "Наименование,НаименованиеПолное,Клиент,Поставщик,Перевозчик,ПрочиеОтношения,Конкурент,Комментарий,ОбслуживаетсяТорговымиПредставителями,Пол,ЮрФизЛицо,ГруппаДоступа,ОсновнойМенеджер,ДатаРегистрации" );
				НовыйПартнер.КонтактнаяИнформация.Очистить();
				
				Отбор = Новый Структура;
				Отбор.Вставить( "Наименование", Выборка.Наименование );
				СтрокиКонтакнойИнформации = КонтактнаяИнформацияПартнера.НайтиСтроки( Отбор );
				
				ЗаполнитьКонтактнуюИнформацию( НовыйПартнер, СтрокиКонтакнойИнформации );
				НовыйПартнер.Записать();
				
				//РезультатРаботы.Объекты.Добавить( "Изменен: " + НовыйПартнер.Код + ":" + НовыйПартнер.Наименование + " " + Строка(ТипЗнч(Выборка.ОсновнойМенеджер)) + Строка(Выборка.ОсновнойМенеджер) );
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Запрос выполнился успешно!
	#КонецОбласти	
	
	// Узнаем сколько Партнеров будет грузиться с одним ИНН
	ГоловныеПартнерыДоговоры = ГоловныеПартнеры.Скопировать();
	ГоловныеПартнеры.Свернуть( "ИНН,Ссылка", "Количество" );
	
	// Загрузка Контрагентов
	#Область ЗагрузкаКонтрагентов
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить( "Данные", Контрагенты.Колонки );
	ПараметрыДанных.Вставить( "Параметр", "ТаблицаКонтрагентов" );
	ПараметрыДанных.Вставить( "Имя", "ВременныеКонтрагенты" );
	ПараметрыДанных.Вставить( "Таблица1С", "Справочник.Контрагенты" );
	ПараметрыДанных.Вставить( "Алиас", "Контрагенты" );
	ПараметрыДанных.Вставить( "Поле", "Ссылка" );
	ПараметрыДанных.Вставить( "ОбщиеПоля", "ИНН," );
	ПараметрыДанных.Вставить( "Восстановить", ВосстанавливаемыеДанные );
	
	
	Выборка = ВыполнитьВолшебныйЗапрос( ПараметрыДанных, Контрагенты, РезультатРаботы  );
	//РезультатРаботы.Объекты.Добавить( Строка(Выборка.Количество()) );
	//
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено( Выборка.Ссылка ) Тогда
			
			СчетчикГоловныхПартнеров = ГоловныеПартнеры.Найти( Выборка.ИНН, "ИНН" );
			
			Если СчетчикГоловныхПартнеров.Ссылка <> Справочники.Партнеры.ПустаяСсылка() Тогда
				ТекущийПартнер = Выборка.Партнер.ПолучитьОбъект();
				ТекущийПартнер.Родитель = СчетчикГоловныхПартнеров.Ссылка;
				ТекущийПартнер.Записать();
				
				Продолжить;
			КонецЕсли;
			
			
			// Добавить Контрагента
			НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств( НовыйКонтрагент, Выборка, "Наименование,ИНН,КПП,ОбособленноеПодразделение,ЮридическоеФизическоеЛицо,КодПоОКПО,НаименованиеПолное,ЮрФизЛицо,СтранаРегистрации,РегистрационныйНомер,НалоговыйНомер" );
			
			
			Если СчетчикГоловныхПартнеров.Количество > 1 Тогда
				// Создаем Головного и привязываем текущего Партнера
				НовыйГоловнойПартнер = Справочники.Партнеры.СоздатьЭлемент();
				НовыйГоловнойПартнер.Наименование = Выборка.Наименование + " (Головной партнер)";
				НовыйГоловнойПартнер.НаименованиеПолное = Выборка.НаименованиеПолное;
				НовыйГоловнойПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
				НовыйГоловнойПартнер.ГруппаДоступа = Выборка.Партнер.ГруппаДоступа;
				НовыйГоловнойПартнер.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
				НовыйГоловнойПартнер.Записать();
				
				НовыйКонтрагент.Партнер = НовыйГоловнойПартнер.Ссылка;
				
				ТекущийПартнер = Выборка.Партнер.ПолучитьОбъект();
				ТекущийПартнер.Родитель = НовыйГоловнойПартнер.Ссылка;
				ТекущийПартнер.Записать();
				
				СчетчикГоловныхПартнеров.Ссылка = НовыйГоловнойПартнер.Ссылка;
				
			Иначе 
				
				НовыйКонтрагент.Партнер = Выборка.Партнер;
				
			КонецЕсли;
			
			
			Отбор = Новый Структура;
			Отбор.Вставить( "ИНН", Выборка.ИНН );
			СтрокиКонтакнойИнформации = КонтактнаяИнформацияКонтрагента.НайтиСтроки( Отбор );
			
			ЗаполнитьКонтактнуюИнформацию( НовыйКонтрагент, СтрокиКонтакнойИнформации );
			
			
			НовыйКонтрагент.Записать();
			
			//РезультатРаботы.Объекты.Добавить( "Добавлен: " + НовыйКонтрагент.Код + ":" + НовыйКонтрагент.Наименование + " " + НовыйКонтрагент.Партнер.Код + " " + НовыйКонтрагент.Партнер );
			
		Иначе
			// Изменить Контрагента
			НовыйКонтрагент = Выборка.Ссылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств( НовыйКонтрагент, Выборка, "Наименование,ИНН,КПП,ОбособленноеПодразделение,ЮридическоеФизическоеЛицо,КодПоОКПО,НаименованиеПолное,ЮрФизЛицо,СтранаРегистрации,РегистрационныйНомер,НалоговыйНомер" );
			
			
			// Как-то надо сделать Головного партнера?!!!
			// Выборка.Ссылка.Партнер должен содержать Партнера
			
			// Была пустышка, пишем текущего Партнера
			Если НовыйКонтрагент.Партнер = Справочники.Партнеры.ПустаяСсылка() Тогда
				НовыйКонтрагент.Партнер = Выборка.Партнер;
			Иначе
				// У объекта уже есть Партнер
				Если НовыйКонтрагент.Партнер <> Выборка.Партнер И Выборка.Партнер <> Справочники.Партнеры.ПустаяСсылка() Тогда
					// Добавляется Партнер в сеть, проверяем Головной или нет
					Если СтрНайти( НовыйКонтрагент.Партнер.Наименование, "(Головной партнер)", НаправлениеПоиска.СНачала ) > 0 Тогда
						// Привязан Головной, не трогаем
						// Привязываем текущего партнера к Головному
						ТекущийПартнер = Выборка.Партнер.ПолучитьОбъект();
						ТекущийПартнер.Родитель = НовыйКонтрагент.Партнер.Ссылка;
						ТекущийПартнер.Записать();
					Иначе
						// Создаем Головного и привязываем текущего Партнера
						НовыйГоловнойПартнер = Справочники.Партнеры.СоздатьЭлемент();
						НовыйГоловнойПартнер.Наименование = Выборка.Наименование + " (Головной партнер)";
						НовыйГоловнойПартнер.НаименованиеПолное = Выборка.НаименованиеПолное;
						НовыйГоловнойПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
						НовыйГоловнойПартнер.ГруппаДоступа = Выборка.Партнер.ГруппаДоступа;
						НовыйГоловнойПартнер.ВариантОтправкиЭлектронногоЧека = Перечисления.ВариантыОтправкиЭлектронногоЧекаПокупателю.НеОтправлять;
						НовыйГоловнойПартнер.Записать();
						
						// Старый партнер привязывается к Головному
						СтарыйПартнер = НовыйКонтрагент.Партнер.ПолучитьОбъект();
						НовыйКонтрагент.Партнер = НовыйГоловнойПартнер.Ссылка;
						СтарыйПартнер.Родитель = НовыйГоловнойПартнер.Ссылка;
						СтарыйПартнер.Записать();
						
						// Текущий партнер привязывается к Головному
						ТекущийПартнер = Выборка.Партнер.ПолучитьОбъект();
						ТекущийПартнер.Родитель = НовыйГоловнойПартнер.Ссылка;
						ТекущийПартнер.Записать();
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			
			Отбор = Новый Структура;
			Отбор.Вставить( "ИНН", Выборка.ИНН );
			СтрокиКонтакнойИнформации = КонтактнаяИнформацияКонтрагента.НайтиСтроки( Отбор );
			
			НовыйКонтрагент.КонтактнаяИнформация.Очистить();
			ЗаполнитьКонтактнуюИнформацию( НовыйКонтрагент, СтрокиКонтакнойИнформации );
			
			НовыйКонтрагент.Записать();
			
			//РезультатРаботы.Объекты.Добавить( "Изменен: " + НовыйКонтрагент.Код + ":" + НовыйКонтрагент.Наименование + " " );
			
		КонецЕсли;
	КонецЦикла;
	ГоловныеПартнеры = Null;
	
	#КонецОбласти
	
	// Загрузка Расчетные счета
	#Область ЗагрузкаРасчетныхСчетов
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить( "Данные", БанковскиеСчетаКонтрагентов.Колонки );
	ПараметрыДанных.Вставить( "Параметр", "ТаблицаРасчетныеСчета" );
	ПараметрыДанных.Вставить( "Имя", "ВременныеРасчетныеСчета" );
	ПараметрыДанных.Вставить( "Таблица1С", "Справочник.БанковскиеСчетаКонтрагентов" );
	ПараметрыДанных.Вставить( "Алиас", "БанковскиеСчета" );
	ПараметрыДанных.Вставить( "Поле", "Ссылка" );
	ПараметрыДанных.Вставить( "ОбщиеПоля", "НомерСчета," );
	ПараметрыДанных.Вставить( "Восстановить", ВосстанавливаемыеДанные );
	
	Выборка = ВыполнитьВолшебныйЗапрос( ПараметрыДанных, БанковскиеСчетаКонтрагентов, РезультатРаботы  );
	Если Выборка <> Неопределено Тогда
		Пока Выборка.Следующий() Цикл 
			Если Не ЗначениеЗаполнено( Выборка.Ссылка ) Тогда
				
				НовыйРасчетныйСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
				Если Выборка.Банк <> Null Тогда
					ЗаполнитьЗначенияСвойств( НовыйРасчетныйСчет, Выборка, "Владелец,НомерСчета,Банк,ВалютаДенежныхСредств" );
					НовыйРасчетныйСчет.Наименование = Прав(СокрЛП(Выборка.НомерСчета), 4) + " в " + СокрЛП(Выборка.Банк) + " (" + СокрЛП(Выборка.ВалютаДенежныхСредств) + ")";   
					НовыйРасчетныйСчет.Записать();
				КонецЕсли;
			Иначе				
				НовыйРасчетныйСчет = Выборка.Ссылка.ПолучитьОбъект();
				
				ЗаполнитьЗначенияСвойств( НовыйРасчетныйСчет, Выборка, "Банк,ВалютаДенежныхСредств" );
				НовыйРасчетныйСчет.Наименование = Прав(СокрЛП(Выборка.НомерСчета), 4) + " в " + СокрЛП(Выборка.Банк) + " (" + СокрЛП(Выборка.ВалютаДенежныхСредств) + ")";   
				НовыйРасчетныйСчет.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	#КонецОбласти
	
	// Загрузка ДоговорыКонтрагентов
	#Область ДоговорыКонтрагентов
	
	ГоловныеПартнерыДоговоры.Свернуть( "ИНН,Ссылка", "Количество" );
	
	
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить( "Данные", ДоговорыКонтрагентов.Колонки );
	ПараметрыДанных.Вставить( "Параметр", "ТаблицаДоговорыКонтрагентов" );
	ПараметрыДанных.Вставить( "Имя", "ВременныеДоговорыКонтрагентов" );
	
	ПараметрыДанных.Вставить( "Таблица1С", "Справочник.ДоговорыКонтрагентов" );
	ПараметрыДанных.Вставить( "Алиас", "ДоговорыКонтрагентов" );
	ПараметрыДанных.Вставить( "Поле", "Ссылка" );
	
	ОбщиеПоля = Новый Массив;
	ОбщееПоле = Новый Структура;
	ОбщееПоле.Вставить( "Реквизит", "Контрагент" );
	ОбщееПоле.Вставить( "Левый", "ИНН" );
	ОбщееПоле.Вставить( "Правый", Неопределено );
	
	ОбщиеПоля.Добавить( ОбщееПоле );
	
	
	ОбщееПоле = Новый Структура;
	ОбщееПоле.Вставить( "Реквизит", "ТипДоговора" );
	ОбщееПоле.Вставить( "Левый", Неопределено );
	ОбщееПоле.Вставить( "Правый", Неопределено );
	
	ОбщиеПоля.Добавить( ОбщееПоле );
	
	//ПараметрыДанных.Вставить( "ОбщиеПоля", "Контрагент,ТипДоговора" );
	ПараметрыДанных.Вставить( "ОбщиеПоля", ОбщиеПоля );
	
	
	
	ПараметрыДанных.Вставить( "Восстановить", ВосстанавливаемыеДанные );
	
	Выборка = ВыполнитьВолшебныйЗапрос( ПараметрыДанных, ДоговорыКонтрагентов, РезультатРаботы  );
	Если Выборка <> Неопределено Тогда
		Пока Выборка.Следующий() Цикл 
			Если Не ЗначениеЗаполнено( Выборка.Ссылка ) Тогда
				
				// Создаем только 1 раз договор на ГоловногоПартнера
				СчетчикГоловныхПартнеров = ГоловныеПартнерыДоговоры.Найти( Выборка.Контрагент.ИНН, "ИНН" );			
				Если СчетчикГоловныхПартнеров.Ссылка <> Справочники.Партнеры.ПустаяСсылка() Тогда
					
					Продолжить;
				Иначе
					СчетчикГоловныхПартнеров.Ссылка = Выборка.Контрагент.Партнер;
				КонецЕсли;
				
				
				НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств( НовыйДоговор, Выборка );
				НовыйДоговор.Партнер = НовыйДоговор.Контрагент.Партнер;
				НовыйДоговор.Записать();
				
			Иначе				
				НовыйДоговор = Выборка.Ссылка.ПолучитьОбъект();
				
				ЗаполнитьЗначенияСвойств( НовыйДоговор, Выборка );
				НовыйДоговор.Партнер = НовыйДоговор.Контрагент.Партнер;
				НовыйДоговор.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СчетчикГоловныхПартнеров = Null;
	
	#КонецОбласти
	
	Ответ.Заголовки.Вставить( "Content-Type", "application/json; charset=utf-8" );
	Ответ.УстановитьТелоИзСтроки( MODCOMM_ОбщегоНазначения.ПолучитьСтрокуJSONИзСтруктуры(РезультатРаботы) ); 	
	Возврат Ответ;
КонецФункции

Функция КонтрагентыПартнерыПолучить(Запрос)
	
	Режим = Запрос.ПараметрыЗапроса.Получить("mode");
	Если Режим = "all" Тогда
		ЗапросКБазе = Новый Запрос;
		ЗапросКБазе.Текст = "ВЫБРАТЬ
		|	Партнеры.Родитель КАК ГоловнойПартнер
		|ПОМЕСТИТЬ ВТ_ГоловныеПартнеры
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.Родитель <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	Партнеры.Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Партнеры.Ссылка КАК Партнер,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	Контрагенты.СтранаРегистрации.Код КАК СтранаРегистрации,
		|	Контрагенты.ИНН КАК ИНН,
		|	Контрагенты.КПП КАК КПП,
		|	Контрагенты.КодПоОКПО КАК ОКПО,
		|	Контрагенты.РегистрационныйНомер КАК РегистрационныйНомер,
		|	Контрагенты.НалоговыйНомер КАК НалоговыйНомер,
		|	Контрагенты.Наименование КАК ПубличноеНаименование,
		|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
		|	Партнеры.Наименование КАК РабочееНаименование,
		|	Партнеры.Клиент КАК Клиент,
		|	Партнеры.Поставщик КАК Поставщик,
		|	Партнеры.Конкурент КАК Конкурент,
		|	Партнеры.ПрочиеОтношения КАК ПрочиеОтношения,
		|	Партнеры.Перевозчик КАК Перевозчик,
		|	Партнеры.ОбслуживаетсяТорговымиПредставителями КАК ОбслуживаетсяТорговымиПредставителями,
		|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер,
		|	Партнеры.ГруппаДоступа КАК ГруппаДоступа,
		|	Партнеры.Комментарий КАК Комментарий,
		|	Партнеры.ДатаРегистрации КАК ДатаРегистрации,
		|	Партнеры.ЮрФизЛицо КАК ЮрФизЛицо,
		|	Контрагенты.ЮрФизЛицо КАК ЮрФизЛицо1
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО (ВЫБОР
		|				КОГДА Партнеры.Родитель.Ссылка ЕСТЬ NULL
		|					ТОГДА Партнеры.Ссылка
		|				ИНАЧЕ Партнеры.Родитель.Ссылка
		|			КОНЕЦ = Контрагенты.Партнер.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГоловныеПартнеры КАК ВТ_ГоловныеПартнеры
		|		ПО (ВТ_ГоловныеПартнеры.ГоловнойПартнер.Ссылка = Партнеры.Ссылка)
		|ГДЕ
		|	ВТ_ГоловныеПартнеры.ГоловнойПартнер.Ссылка ЕСТЬ NULL;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
		|	БанковскиеСчетаКонтрагентов.Банк.Код КАК Банк,
		|	БанковскиеСчетаКонтрагентов.Владелец.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
		|ГДЕ
		|	БанковскиеСчетаКонтрагентов.Владелец ССЫЛКА Справочник.Контрагенты
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Номер КАК Номер,
		|	ДоговорыКонтрагентов.Дата КАК Дата,
		|	ДоговорыКонтрагентов.ОграничиватьСуммуЗадолженности КАК ОграничиватьСуммуЗадолженности,
		|	ДоговорыКонтрагентов.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
		|	ДоговорыКонтрагентов.ТипДоговора КАК ВидДоговора,
		|	ДоговорыКонтрагентов.Организация.ИНН КАК Организация,
		|	ДоговорыКонтрагентов.Контрагент.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|;";
		
		
		СписокКонтрагентовПартнеров = Новый Массив;
		РезультатыЗапросов = ЗапросКБазе.ВыполнитьПакет();
		
		Выборка = РезультатыЗапросов[1].Выбрать();
		БанковскиеСчета = РезультатыЗапросов[2].Выгрузить();
		Договора = РезультатыЗапросов[3].Выгрузить();
		
		Пока Выборка.Следующий() Цикл 
			
			Партнер = Новый Структура;
			Партнер.Вставить( "РабочееНаименование" );
			Партнер.Вставить( "ПубличноеНаименование" );
			Партнер.Вставить( "ИНН" );
			Партнер.Вставить( "КПП" );
			Партнер.Вставить( "ОКПО" );
			Партнер.Вставить( "ЮрФизЛицо" );
			Партнер.Вставить( "СтранаРегистрации" );
			Партнер.Вставить( "Договор" );
			Партнер.Вставить( "ГруппаДоступа" );
			Партнер.Вставить( "ОсновнойМенеджер" );
			Партнер.Вставить( "РасчетныеСчета" );
			Партнер.Вставить( "ДатаРегистрации" );
			Партнер.Вставить( "Клиент" );
			Партнер.Вставить( "Поставщик" );
			Партнер.Вставить( "ПрочиеОтношения" );
			Партнер.Вставить( "Перевозчик" );
			Партнер.Вставить( "Комментарий" );
			Партнер.Вставить( "Руководитель" );
			
			ЗаполнитьЗначенияСвойств( Партнер, Выборка );
			Партнер.ДатаРегистрации = Формат( Выборка.ДатаРегистрации, "ДФ=ггггММддЧЧммсс" );
			Партнер.РасчетныеСчета = БанковскиеСчетаКонтрагента( Выборка.Контрагент, БанковскиеСчета );
			Партнер.Договор = ДоговорыКонтрагента( Выборка.Контрагент, Договора );
			СписокКонтрагентовПартнеров.Добавить( Партнер );
			
		КонецЦикла;
	КонецЕсли;  // Режим all
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить( "Content-Type", "application/json; charset=utf-8" );
	Ответ.УстановитьТелоИзСтроки( MODCOMM_ОбщегоНазначения.ПолучитьСтрокуJSONИзСтруктуры( СписокКонтрагентовПартнеров ) );
	Возврат Ответ;
КонецФункции
// Функция - Банковские счета контрагента
//
// Параметры:
//  Контрагент	 - Ссылка на справочник Контрагенты
//  Данные		 - Таблица значений содержащая Расчетные счета и БИК 
// 
// Возвращаемое значение:
//   Массив структуры из полей НомерСчета и Банк 
//
Функция БанковскиеСчетаКонтрагента( Контрагент, Данные )
	
	Результат = Новый Массив;
	
	Отбор = Новый Структура();
	Отбор.Вставить( "Контрагент", Контрагент );
	БанковскиеСчета = Данные.НайтиСтроки( Отбор );
	
	Для Каждого Элемент Из БанковскиеСчета Цикл
		Результат.Добавить( MODCOMM_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру( Элемент, "НомерСчета,Банк" ) );								
	КонецЦикла;	
	
	Возврат Результат; 
КонецФункции
// Функция - Банковские счета контрагента
//
// Параметры:
//  Контрагент	 - Ссылка на справочник Контрагенты
//  Данные		 - Таблица значений содержащая Расчетные счета и БИК 
// 
// Возвращаемое значение:
//   Массив структуры из полей НомерСчета и Банк 
//
Функция ДоговорыКонтрагента( Контрагент, Данные )
	
	Результат = Новый Массив;
	
	Отбор = Новый Структура();
	Отбор.Вставить( "Контрагент", Контрагент );
	Договоры = Данные.НайтиСтроки( Отбор );
	
	Для Каждого Элемент Из Договоры Цикл
		Результат.Добавить( MODCOMM_ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру( Элемент, "Организация,Номер,Дата,ВидДоговора,ОграничиватьСуммуЗадолженности,ДопустимаяСуммаЗадолженности,ВидДоговора" ) );								
	КонецЦикла;	
	
	Возврат Результат; 
КонецФункции

// Функция обрабатывает GET запрос /tov
Функция НоменклатураПолучить (Запрос)
	Режим = Запрос.ПараметрыЗапроса.Получить("mode");
	Если Режим = "all" Тогда
		ЗапросКБазе = Новый Запрос;
		ЗапросКБазе.Текст = "ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка.Наименование КАК Наименование,
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка.ДатаРождения КАК ДатаРождения,
		|	ПРЕДСТАВЛЕНИЕ(ФизическиеЛицаКонтактнаяИнформация.Ссылка.Пол) КАК Пол,
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка.ИНН КАК ИНН,
		|	ФизическиеЛицаКонтактнаяИнформация.Тип КАК Тип,
		|	ФизическиеЛицаКонтактнаяИнформация.Вид КАК Вид,
		|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление,
		|	ФизическиеЛицаКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	ФизическиеЛицаКонтактнаяИнформация.Страна КАК Страна,
		|	ФизическиеЛицаКонтактнаяИнформация.Регион КАК Регион,
		|	ФизическиеЛицаКонтактнаяИнформация.Город КАК Город,
		|	ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
		|	ФизическиеЛицаКонтактнаяИнформация.ДоменноеИмяСервера КАК ДоменноеИмяСервера,
		|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефона КАК НомерТелефона,
		|	ФизическиеЛицаКонтактнаяИнформация.НомерТелефонаБезКодов КАК НомерТелефонаБезКодов,
		|	ФизическиеЛицаКонтактнаяИнформация.ВидДляСписка КАК ВидДляСписка
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		
		
		СписокФизическихЛиц = Новый Массив;
		СписокСвойствКонтактнойИнформации = "Тип,Вид,Представление,ЗначенияПолей,Страна,Регион,Город,АдресЭП,ДоменноеИмяСервера,НомерТелефона,НомерТелефонаБезКодов,ВидДляСписка";
		ШаблонКонтактнойИнформации = MODCOMM_ОбщегоНазначения.КоллекцияКолонокТаблицыЗначенийВСтруктуру( КонтактнаяИнформацияТаблицаЗначений().Колонки, СписокСвойствКонтактнойИнформации );
		
		Выборка = ЗапросКБазе.Выполнить().Выбрать();
		ФизическоеЛицо = Неопределено;
		СтароеНаименование = "";
		Пока Выборка.Следующий() Цикл 
			
			Если СтароеНаименование <> Выборка.Наименование Тогда
				
				Если Не ПустаяСтрока( СтароеНаименование ) Тогда
					СписокФизическихЛиц.Добавить( ФизическоеЛицо ); 	
				КонецЕсли;
				
				
				ФИО = СтрРазделить( Выборка.Наименование, " ", Ложь );
				
				ФизическоеЛицо = Новый Структура;
				ФизическоеЛицо.Вставить( "Фамилия", ?(ФИО.Количество() > 0, ФИО[0], "") );
				ФизическоеЛицо.Вставить( "Имя", ?(ФИО.Количество() > 1, ФИО[1], "") );
				ФизическоеЛицо.Вставить( "Отчество", ?(ФИО.Количество() > 2, ФИО[2], "") );
				ФизическоеЛицо.Вставить( "ДатаРождения", Формат( Выборка.ДатаРождения, "ДФ=ггггММддЧЧммсс") );
				ФизическоеЛицо.Вставить( "Пол", Выборка.Пол );
				ФизическоеЛицо.Вставить( "ИНН", Выборка.ИНН );
				ФизическоеЛицо.Вставить( "СНИЛС", "" );
				ФизическоеЛицо.Вставить( "КонтактнаяИнформация", Новый Массив );
				
			КонецЕсли;
			
			КонтактнаяИнформация = ШаблонКонтактнойИнформации;			
			ЗаполнитьЗначенияСвойств( КонтактнаяИнформация, Выборка, СписокСвойствКонтактнойИнформации ); 
			ФизическоеЛицо.КонтактнаяИнформация.Добавить( КонтактнаяИнформация ); 
			
			СтароеНаименование = Выборка.Наименование;
		КонецЦикла;
		
		Если ФизическоеЛицо <> Неопределено Тогда
			СписокФизическихЛиц.Добавить( ФизическоеЛицо );
		КонецЕсли;
	КонецЕсли;
	
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.Заголовки.Вставить( "Content-Type", "application/json; charset=utf-8" );
	Ответ.УстановитьТелоИзСтроки( MODCOMM_ОбщегоНазначения.ПолучитьСтрокуJSONИзСтруктуры( СписокФизическихЛиц ) );
	
	Возврат Ответ;
КонецФункции

Функция НоменклатураЗаписать(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	// Получаем объект в котором содержится результат работы процедур
	РезультатРаботы = MODCOMM_ОбщегоНазначения.СтруктураРезультатаОбработок("Загрузка номенклатуры");
	
	#Область ПолучениеJSONДанных
	СтрокаJSON = Запрос.ПолучитьТелоКакСтроку();
	Номенклатура = MODCOMM_ОбщегоНазначения.ПолучитьСтруктуруИзСтрокиJSON( СтрокаJSON );	
	Если Номенклатура = Неопределено Или ТипЗнч(Номенклатура) <> Тип("Массив") Тогда 
		// Неверный формат JSON
		РезультатРаботы.НомерОшибки = 2001;
		РезультатРаботы.ТекстОшибки = "Не удалось получить структуру из строки JSON"; 
		РезультатРаботы.Объекты.Добавить( СтрокаJSON );
		
		Ответ.УстановитьТелоИзСтроки( MODCOMM_ОбщегоНазначения.ПолучитьСтрокуJSONИзСтруктуры(РезультатРаботы) ); 
		Возврат Ответ; 
	КонецЕсли;
	#КонецОбласти
	
	#Область ИнициализацияВременныхТаблицы
	
	ВременнаяНоменклатура = НоменклатураТаблицаЗначений();
	ВременныеДополнительныеРеквизиты = ДополнительныеРеквизитыТаблицаЗначений();
	ВременныеШтрихкоды = ШтрихкодыТаблицаЗначений();
	ВременныеМаркаПроизводители = МаркаПроизводительТаблицаЗначений();
	ВременныеУпаковки = УпаковкиТаблицаЗначений();
	
	ВосстанавливаемыеДанные = ВосстанавливаемыеДанныеТаблицаЗначений();	
	ЗаполнитьВосстанавливаемыеДанные( ВосстанавливаемыеДанные, "Номенклатура" );
	
	
	#КонецОбласти
	
	// Восстанавливаем данные	
	Для Каждого СтрокаНоменклатура Из Номенклатура Цикл
		
		
		СтрокаВременнаяНоменклатура = ВременнаяНоменклатура.Добавить();
		// ЗаполнитьЗначенияСвойств( СтрокаВременнаяНоменклатура, СтрокаНоменклатура );
		СтрокаВременнаяНоменклатура.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
		Если СтрокаНоменклатура.Свойство("ЕдиницаИзмерения") Тогда
			СтрокаВременнаяНоменклатура.ЕдиницаИзмерения = СтрокаНоменклатура.ЕдиницаИзмерения;
		КонецЕсли;
		СтрокаВременнаяНоменклатура.Артикул = СтрокаНоменклатура.Артикул;
		СтрокаВременнаяНоменклатура.Наименование = СтрокаНоменклатура.Наименование;
		СтрокаВременнаяНоменклатура.НаименованиеПолное = СтрокаНоменклатура.НаименованиеПолное;
		СтрокаВременнаяНоменклатура.ВесЕдиницаИзмерения = СтрокаНоменклатура.ВесЕдиницаИзмерения;
		СтрокаВременнаяНоменклатура.ВесЗнаменатель = СтрокаНоменклатура.ВесЗнаменатель;
		СтрокаВременнаяНоменклатура.ВесЧислитель = СтрокаНоменклатура.ВесЧислитель;
		СтрокаВременнаяНоменклатура.ВестиУчетПоГТД = СтрокаНоменклатура.ВестиУчетПоГТД;
		СтрокаВременнаяНоменклатура.ВестиУчетСертификатовНоменклатуры = СтрокаНоменклатура.ВестиУчетСертификатовНоменклатуры;
		СтрокаВременнаяНоменклатура.ВидНоменклатуры = СтрокаНоменклатура.ВидНоменклатуры;
		
		Если СтрокаНоменклатура.Свойство("Производитель") Тогда 
			СтрокаВременнаяНоменклатура.Производитель = СтрокаНоменклатура.Производитель;
		КонецЕсли;
		
		Если СтрокаНоменклатура.Свойство("Марка") Тогда
			СтрокаВременнаяНоменклатура.Марка = СтрокаНоменклатура.Марка;
		КонецЕсли;
		
		Если СтрокаНоменклатура.Свойство("СрокГодности") Тогда
			СтрокаВременнаяНоменклатура.СрокГодности = СтрокаНоменклатура.СрокГодности;
		КонецЕсли;
		
		Если СтрокаНоменклатура.СтавкаНДС = 10 Тогда
			СтрокаВременнаяНоменклатура.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
		ИначеЕсли СтрокаНоменклатура.СтавкаНДС = 18 Тогда
			СтрокаВременнаяНоменклатура.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		Иначе
			СтрокаВременнаяНоменклатура.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		Если СтрокаНоменклатура.Свойство("ЕдиницаДляОтчетов") Тогда
			СтрокаВременнаяНоменклатура.ЕдиницаДляОтчетов = СтрокаНоменклатура.ЕдиницаИзмерения;
		КонецЕсли;
		
		СтрокаВременнаяНоменклатура.КоэффициентЕдиницыДляОтчетов = СтрокаНоменклатура.КоэффициентЕдиницыДляОтчетов;
		
		СтрокаВременнаяНоменклатура.MODCOMM_ТФО = СтрокаНоменклатура.MODCOMM_ТФО;
		
		СтрокаВременнаяНоменклатура.ЕдиницаИзмеренияСрокаГодности = MODCOMM_ОбщегоНазначения.ЗначениеПеречисленияПоИмени( "ЕдиницыИзмеренияВремени", СтрокаНоменклатура.ЕдиницаИзмеренияСрокаГодности );
		// СтрокаВременнаяНоменклатура.ЕдиницаИзмеренияСрокаГодности = Перечисления.ЕдиницыИзмеренияВремени.Сутки;
		
		СтрокаВременнаяНоменклатура.ВесМожноУказыватьВДокументах = Ложь;
		//СтрокаВременнаяНоменклатура.НаименованиеПолное = СтрокаНоменклатура.НаименованиеПолное;
		СтрокаВременнаяНоменклатура.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
		СтрокаВременнаяНоменклатура.ЕдиницаИзмеренияСрокаГодности = MODCOMM_ОбщегоНазначения.ЗначениеПеречисленияПоИмени( "ЕдиницаИзмеренияСрокаГодности", СтрокаНоменклатура.ЕдиницаИзмеренияСрокаГодности );
		//СтрокаВременнаяНоменклатура.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
		СтрокаВременнаяНоменклатура.ИспользоватьУпаковки = Истина;
		СтрокаВременнаяНоменклатура.Качество = Перечисления.ГрадацииКачества.Новый; 
		СтрокаВременнаяНоменклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БезОсобенностейУчета;
		
		// Заполняем таблицу временных доп реквизитов
		Для Каждого Реквизит Из СтрокаНоменклатура.ДополнительныеРеквизиты Цикл 
			СтрокаДополнительныхРеквизитов = ВременныеДополнительныеРеквизиты.Добавить();
			СтрокаДополнительныхРеквизитов.MODCOMM_ТФО = СтрокаНоменклатура.MODCOMM_ТФО;
			ЗаполнитьЗначенияСвойств( СтрокаДополнительныхРеквизитов, Реквизит ); 	
		КонецЦикла;
		
		// Заполняем таблицу временных Марки Производители
		//СтрокаМаркаПроизводитель = ВременныеМаркаПроизводители.Добавить();
		//Если СтрокаНоменклатура.Свойство("Марка") Тогда
		//	СтрокаМаркаПроизводитель.Марка = СтрокаНоменклатура.Марка;
		//КонецЕсли;
		//Если СтрокаНоменклатура.Свойство("Производитель") Тогда
		//	СтрокаМаркаПроизводитель.Производитель = СтрокаНоменклатура.Производитель;
		//КонецЕсли;
		
		
		// Заполняем таблицу временных Упаковок
		Для Каждого Элемент Из СтрокаНоменклатура.УпаковкиЕдиницыИзмерения Цикл
			
			СтрокаУпаковки = ВременныеУпаковки.Добавить();
			
			ЗаполнитьЗначенияСвойств( СтрокаУпаковки, Элемент );
			
			
			СтрокаУпаковки.ТипИзмеряемойВеличины = MODCOMM_ОбщегоНазначения.ЗначениеПеречисленияПоИмени( "ТипыИзмеряемыхВеличин", Элемент.ТипИзмеряемойВеличины );
			СтрокаУпаковки.ТипУпаковки = MODCOMM_ОбщегоНазначения.ЗначениеПеречисленияПоИмени( "ТипыУпаковокНоменклатуры", Элемент.ТипУпаковки );
			СтрокаУпаковки.Владелец = СтрокаНоменклатура.MODCOMM_ТФО;
			
		КонецЦикла;
		
		// Заполняем таблицу временных штрих кодов
		Для Каждого Элемент Из СтрокаНоменклатура.ШтрихкодыНоменклатуры Цикл
			СтрокаШтрихкодов = ВременныеШтрихкоды.Добавить();
			СтрокаШтрихкодов.MODCOMM_ТФО = СтрокаНоменклатура.MODCOMM_ТФО;
			Если Элемент.Свойство("Штрихкод") Тогда
				СтрокаШтрихкодов.Штрихкод = Элемент.Штрихкод;
			КонецЕсли;
			Если Элемент.Свойство("Упаковка") Тогда
				СтрокаШтрихкодов.Упаковка = Элемент.Упаковка;
			КонецЕсли;
		КонецЦикла;
		
		
		РезультатРаботы.Сохранить = Истина;
		
	КонецЦикла;	
	
	
	#Область ЗагрузкаМаркиПроизводителей
	// Получаем уникальную пару Марка - Производитель
	ВременныеМаркаПроизводители.Свернуть("Марка,Производитель");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Производители = ВосстановитьПроизводителей( ВременныеМаркаПроизводители, МенеджерВременныхТаблиц );
	
	Для Каждого Элемент Из Производители Цикл
		НовыйПроизводитель = Справочники.Производители.СоздатьЭлемент();
		НовыйПроизводитель.Наименование = Элемент.Производитель;
		НовыйПроизводитель.Записать();
	КонецЦикла;
	
	Марки = ВосстановитьМарки( МенеджерВременныхТаблиц );
	
	Для Каждого Элемент Из Марки Цикл
		
		НоваяМарка = Справочники.Марки.СоздатьЭлемент();
		НоваяМарка.Наименование = Элемент.Марка;
		НоваяМарка.Производитель = Элемент.Производитель;
		
		Если ЗначениеЗаполнено( Элемент.Производитель ) И Элемент.Производитель <> Справочники.Производители.ПустаяСсылка() Тогда 
			НоваяМарка.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	МенеджерВременныхТаблиц.Закрыть();
	
	#КонецОбласти
	
	#Область ЗагрузкаНоменклатуры	
	// Готовим данные для формирования запроса
	ПараметрыДанных = ПараметрыЗагрузки();
	ПараметрыДанных.Данные = ВременнаяНоменклатура.Колонки;
	ПараметрыДанных.Параметр = "ТаблицаНоменклатуры";
	ПараметрыДанных.Имя = "ВременныеНоменклатура";
	ПараметрыДанных.Таблица1С = "Справочник.Номенклатура";
	ПараметрыДанных.Алиас = "Номенклатура";
	ПараметрыДанных.ОбщиеПоля = "MODCOMM_ТФО,";
	ПараметрыДанных.Восстановить = ВосстанавливаемыеДанные;
	
	// Инициализация запроса
	ЗапросКБазе = Новый Запрос;
	ЗапросКБазе.Текст = СоздатьЗапросТаблицаЗначенийВоВременнуюТаблицу( ПараметрыДанных );
	ЗапросКБазе.УстановитьПараметр( ПараметрыДанных.Параметр, ВременнаяНоменклатура );
	
	//РезультатРаботы.Объекты.Добавить( ЗапросКБазе.Текст );
	
	// Запускаем адскую машину
	Попытка
		//РезультатРаботы.Объекты.Добавить( ЗапросКБазе.Текст );
		Выборка = ЗапросКБазе.Выполнить().Выбрать();
	Исключение
		РезультатРаботы.Объекты.Добавить( ОписаниеОшибки() );
		РезультатРаботы.Сохранить = Ложь;
	КонецПопытки;
	
	ВосстановленныеДанные = ВосстановитьДополнительныеРеквизитыНоменклатуры( ВременныеДополнительныеРеквизиты );
	Если ВосстановленныеДанные.Количество() > 0 Тогда
		ВосстановленныеДанные.Индексы.Добавить("MODCOMM_ТФО");
	КонецЕсли;
	
	// Обрабатываем полученный результат
	Если РезультатРаботы.Сохранить Тогда 
		
		РезультатРаботы.Объекты.Добавить( Строка(Выборка.Количество()) );
		
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено( Выборка.Ссылка ) Тогда
				// Добавить Номенклатуру
				
				НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
				НоваяНоменклатура.УстановитьНовыйКод();
				НоваяНоменклатура.Наименование = Выборка.Наименование;
				
				ЗаполнитьЗначенияСвойств( НоваяНоменклатура, Выборка );
				НоваяНоменклатура.ТипНоменклатуры = НоваяНоменклатура.ВидНоменклатуры.ТипНоменклатуры;
				НоваяНоменклатура.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
				
				Если НоваяНоменклатура.ЕдиницаИзмеренияСрокаГодности <> Перечисления.ЕдиницыИзмеренияВремени.Сутки Тогда
					НоваяНоменклатура.ЕдиницаИзмеренияСрокаГодности	= Перечисления.ЕдиницыИзмеренияВремени.Сутки;
				КонецЕсли;
				
				
				ТекущиеДополнительныеРеквизиты = ПолучитьДополнительныеРеквизитыПоНоменклатуре( Выборка.MODCOMM_ТФО, ВосстановленныеДанные );
				Для Каждого Элемент Из ТекущиеДополнительныеРеквизиты Цикл 
					НовыйДополнительныйРеквизит = НоваяНоменклатура.ДополнительныеРеквизиты.Добавить();		
					НовыйДополнительныйРеквизит.Свойство = Элемент.Свойство;
					НовыйДополнительныйРеквизит.Значение = Элемент.Значение;	
				КонецЦикла;
				
				Попытка	
					НоваяНоменклатура.ОбменДанными.Загрузка = Истина;
					НоваяНоменклатура.Записать();
				Исключение
					РезультатРаботы.Объекты.Добавить( ОписаниеОшибки() );
				КонецПопытки;
				
				
			Иначе 
				// Изменить Номенклатуру
				
				НоваяНоменклатура = Выборка.Ссылка.ПолучитьОбъект();
				ЗаполнитьЗначенияСвойств( НоваяНоменклатура, Выборка );
				НоваяНоменклатура.ТипНоменклатуры = НоваяНоменклатура.ВидНоменклатуры.ТипНоменклатуры;
				НоваяНоменклатура.НаборУпаковок = Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры;
				
				Если НоваяНоменклатура.ЕдиницаИзмеренияСрокаГодности <> Перечисления.ЕдиницыИзмеренияВремени.Сутки Тогда
					НоваяНоменклатура.ЕдиницаИзмеренияСрокаГодности	= Перечисления.ЕдиницыИзмеренияВремени.Сутки;
				КонецЕсли;
				
				НоваяНоменклатура.ДополнительныеРеквизиты.Очистить();
				
				ТекущиеДополнительныеРеквизиты = ПолучитьДополнительныеРеквизитыПоНоменклатуре( Выборка.MODCOMM_ТФО, ВосстановленныеДанные );
				Для Каждого Элемент Из ТекущиеДополнительныеРеквизиты Цикл 
					НовыйДополнительныйРеквизит = НоваяНоменклатура.ДополнительныеРеквизиты.Добавить();		
					НовыйДополнительныйРеквизит.Свойство = Элемент.Свойство;
					НовыйДополнительныйРеквизит.Значение = Элемент.Значение;	
				КонецЦикла;
				
				Попытка
					НоваяНоменклатура.ОбменДанными.Загрузка = Истина;
					НоваяНоменклатура.Записать();
				Исключение
					РезультатРаботы.Объекты.Добавить( ОписаниеОшибки() );
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Запрос выполнился успешно!
	
	
	#Область ЗагрузкаУпаковок
	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить( "Данные", ВременныеУпаковки.Колонки );
	ПараметрыДанных.Вставить( "Параметр", "ТаблицаУпаковок" );
	ПараметрыДанных.Вставить( "Имя", "ВременныеУпаковки" );
	
	ПараметрыДанных.Вставить( "Таблица1С", "Справочник.УпаковкиЕдиницыИзмерения" );
	ПараметрыДанных.Вставить( "Алиас", "Упаковки" );
	ПараметрыДанных.Вставить( "Поле", "Ссылка" );
	
	ОбщиеПоля = Новый Массив;
	ОбщееПоле = Новый Структура;
	ОбщееПоле.Вставить( "Реквизит", "Владелец" );
	ОбщееПоле.Вставить( "Левый", "MODCOMM_ТФО" );
	ОбщееПоле.Вставить( "Правый", Неопределено );
	
	ОбщиеПоля.Добавить( ОбщееПоле );
	
	
	ОбщееПоле = Новый Структура;
	ОбщееПоле.Вставить( "Реквизит", "ЕдиницаИзмерения" );
	ОбщееПоле.Вставить( "Левый", "Код" );
	ОбщееПоле.Вставить( "Правый", Неопределено );
	
	ОбщиеПоля.Добавить( ОбщееПоле );
	
	//ПараметрыДанных.Вставить( "ОбщиеПоля", "Контрагент,ТипДоговора" );
	ПараметрыДанных.Вставить( "ОбщиеПоля", ОбщиеПоля );
	
	
	
	ПараметрыДанных.Вставить( "Восстановить", ВосстанавливаемыеДанные );
	
	Выборка = ВыполнитьВолшебныйЗапрос( ПараметрыДанных, ВременныеУпаковки, РезультатРаботы  );
	Если Выборка <> Неопределено Тогда
		Пока Выборка.Следующий() Цикл 
			Если Не ЗначениеЗаполнено( Выборка.Ссылка ) Тогда
				
				НоваяУпаковка = Справочники.УпаковкиЕдиницыИзмерения.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств( НоваяУпаковка, Выборка );
				Попытка
					НоваяУпаковка.Записать();
				Исключение
					РезультатРаботы.Объекты.Добавить( ОписаниеОшибки() );	
				КонецПопытки;
				
			Иначе				
				НоваяУпаковка = Выборка.Ссылка.ПолучитьОбъект();
				
				ЗаполнитьЗначенияСвойств( НоваяУпаковка, Выборка );
				НоваяУпаковка.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	#КонецОбласти
	
	#Область ЗагрузкаШтрихкодов
	
	//Штрихкоды = ВосстановитьШтрихкоды( ВременныеШтрихкоды );
	//РезультатРаботы.Объекты.Добавить( "Штрихкоды: " + Строка(Штрихкоды.Количество()) );
	//Для Каждого Элемент Из Штрихкоды Цикл 
	//	Попытка
	//		НоваяЗапись = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
	//		НоваяЗапись.Штрихкод = Элемент.Штрихкод;
	//		НоваяЗапись.Номенклатура = Элемент.Номенклатура;
	//		НоваяЗапись.Характеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	//		НоваяЗапись.Упаковка = Элемент.Упаковка; 
	//		НоваяЗапись.Записать();
	//	Исключение
	//	    РезультатРаботы.Объекты.Добавить( "Штрихкоды: " + ОписаниеОшибки() );
	//	КонецПопытки;
	//КонецЦикла;
	
	#КонецОбласти
	
	
	
	#КонецОбласти	
	
	Ответ.УстановитьТелоИзСтроки( MODCOMM_ОбщегоНазначения.ПолучитьСтрокуJSONИзСтруктуры( РезультатРаботы ));  
	Возврат Ответ;
КонецФункции
